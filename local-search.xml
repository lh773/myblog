<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这是我的第一个博客</title>
    <link href="/myblog/2021/10/05/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/myblog/2021/10/05/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="这是我的第一个个人博客"><a href="#这是我的第一个个人博客" class="headerlink" title="这是我的第一个个人博客"></a>这是我的第一个个人博客</h1><h2 id="我很开心"><a href="#我很开心" class="headerlink" title="我很开心"></a>我很开心</h2><h3 id="欢迎大家来我的博客参观"><a href="#欢迎大家来我的博客参观" class="headerlink" title="欢迎大家来我的博客参观"></a>欢迎大家来我的博客参观</h3>]]></content>
    
    
    <categories>
      
      <category>hexo入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsp+servlet</title>
    <link href="/myblog/2021/10/05/JSP%20+%20Servlet/"/>
    <url>/myblog/2021/10/05/JSP%20+%20Servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="JSP-Servlet"><a href="#JSP-Servlet" class="headerlink" title="JSP + Servlet"></a>JSP + Servlet</h1><h2 id="1-web相关概念"><a href="#1-web相关概念" class="headerlink" title="1.web相关概念"></a>1.web相关概念</h2><h3 id="1-1软件架构"><a href="#1-1软件架构" class="headerlink" title="1.1软件架构"></a>1.1软件架构</h3><ol><li><p>B/S 浏览器/服务器</p></li><li><p>C/S :客户端/服务器端</p></li></ol><h3 id="1-2资源分类"><a href="#1-2资源分类" class="headerlink" title="1.2资源分类"></a>1.2资源分类</h3><p>1.静态资源：所有的浏览器的结果都是一样的，称之为静态资源，静态资源直接可以被浏览器解析</p><p>HTML  CSS， JS</p><ol start="2"><li>动态资源：每个用户访问相同的资源，所得的结果可能不同，这样的资源</li></ol><p>称位动态资源，动态资源需要先转为静态资源，然后在返回给浏览器</p><p>servlet / jsp ，php</p><h3 id="1-3网络三要素"><a href="#1-3网络三要素" class="headerlink" title="1.3网络三要素"></a>1.3网络三要素</h3><ol><li><p>IP地址：电子设备在网络中的唯一标识</p></li><li><p>端口号：应用程序在计算机中的唯一标识。0-65536</p></li><li><p>传输协议：规定了数据传输的规则</p></li></ol><p>​      UDP：不安全的协议，速度高</p><p>​      TCP：安全的协议，速度慢</p><h2 id="2-服务器"><a href="#2-服务器" class="headerlink" title="2.服务器"></a>2.服务器</h2><ol><li><p>概述：安装服务器软件的计算机</p></li><li><p>服务器软件：可以接受用户请求，处理请求并作出响应的软件</p></li></ol><p>​    部署web项目，让用户通过浏览器访问这些项目</p><p>​    动态资源必须依赖web服务器软件的，所有web软件亦被称为web容器</p><ol start="3"><li>常见的java相关的web服务器软件</li></ol><p>​    webLogic ： Oracle公司</p><p>​     webSphere： IBM公司</p><p>​      JBOSS ：     jboss公司</p><p>Tomcat： Apache基金组织。中小型JavaEE服务器，支持少量的javaEE规范</p><p>开源，免费，Tomcat 支持集群，性能优异</p><h2 id="Tomca"><a href="#Tomca" class="headerlink" title="Tomca"></a>Tomca</h2><p>1.下载</p><ol start="2"><li><p>安装</p></li><li><p>卸载</p></li><li><p>启动服务</p></li></ol><p>闪退 ：JAVA_HOME</p><p>​    启动报错 ：查看日记</p><ol start="5"><li>访问</li></ol><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>概述：运行在服务器端的java小程序</p><p>执行原理：</p><p>1、服务器接收到浏览器请求，根据端口号后第一段字符串可以相应的找到项目。</p><p>2、找到对应项目后，tomcat可以找到该项目的web.xml</p><p>3、通过web.xml中的配置，去找是否有<url-pattern>与第二段字符匹配，如果有匹配，它会根据<servlet-name>找到相应的Servlet</p><p>4、通过反射机制创建该Servlet对象，调用service方法提供服务</p><h3 id="1-3生命周期"><a href="#1-3生命周期" class="headerlink" title="1.3生命周期"></a>1.3生命周期</h3><p>1、被创建：执行init（），该方法只执行一次</p><p>2、提供服务：执行service（），该方法执行多次</p><p>3、销毁：执行destory（）方法，该方法只执行一次</p><h3 id="1-4方法详解"><a href="#1-4方法详解" class="headerlink" title="1.4方法详解"></a>1.4方法详解</h3><p>1、init（）</p><p>​    初始化时机可以改变</p><p>注意：</p><p>servlet是单例模式，多个用户访问可能存在线程安全问题，所以尽可能不要在Servlet中声明成员变量或者修改值的操作</p><h2 id="2、HTTP-请求消息"><a href="#2、HTTP-请求消息" class="headerlink" title="2、HTTP-请求消息"></a>2、HTTP-请求消息</h2><h3 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h3><p>1、基于TCP/IP高级协议，安全的</p><p>2、默认端口：80</p><p>3、基于请求/响应模型，一次请求对应一次响应</p><p>4、无状态的：每次请求都是相对独立，不共享数据</p><h3 id="2-3、历史版本"><a href="#2-3、历史版本" class="headerlink" title="2.3、历史版本"></a>2.3、历史版本</h3><p>1.1.0：每一次</p><p>2.1.1：复用连接</p><h3 id="2-4请求消息"><a href="#2-4请求消息" class="headerlink" title="2.4请求消息"></a>2.4请求消息</h3><p>1、请求行</p><p>2、请求头</p><p>3、请求空格</p><p>4、请求体</p><p>请求行：</p><p>格式：</p><p>请求方式有七中</p><p>请求头：</p><p>host：发送请求的主机</p><p>请求空格：用于分割请求头和请求体</p><p>请求体</p><p>​    用于封装post请求信息的请求参数，采用键值对的存储方式</p><p>参数名=数据</p><h3 id="3、Request对象"><a href="#3、Request对象" class="headerlink" title="3、Request对象"></a>3、Request对象</h3><h4 id="3-1获取请求行"><a href="#3-1获取请求行" class="headerlink" title="3.1获取请求行"></a>3.1获取请求行</h4><p>1、获取请求方式：String getMETHOD()</p><p>2、获取虚拟目录：String getContextPath()</p><p>3、获取servlet访问路径:String getServletPath()</p><p>4、获取URI:String getRequestURI()</p><p>5、获取URL:String getRequestURL()</p><h3 id="3-2获取请求头"><a href="#3-2获取请求头" class="headerlink" title="3.2获取请求头"></a>3.2获取请求头</h3><p>1、String getHender(String name):通过请求头的名称获取请求头的值</p><p>2、Enumeration getHeaderNames()</p><p>​        Enumeration:相当于迭代器</p><p>3、获取客户机的ip地址：String getRemoteAddr()</p><h3 id="3-3获取请求体数据"><a href="#3-3获取请求体数据" class="headerlink" title="3.3获取请求体数据"></a>3.3获取请求体数据</h3><p>步骤：</p><p>1、获取流对象：</p><p>BufferReader getReader()</p><p>ServletinputStream getinputStream()</p><p>2、从流中读取请求体数据</p><h3 id="3-4其他方法"><a href="#3-4其他方法" class="headerlink" title="3.4其他方法"></a>3.4其他方法</h3><p>1、根据参数名获取参数值：String getParqmeter(String name)</p><p>2、根据参数名获取参数值的数组：String[] getParameterValues(String name)</p><p>3、获取所有参数的参数名字Enumeration getParameterNames</p><p>4、获取所有参数的map集合：Map&lt;String,string[]&gt; getParameterMap()</p><h3 id="3-5请求转发"><a href="#3-5请求转发" class="headerlink" title="3.5请求转发"></a>3.5请求转发</h3><p>概述：一种在服务器内部的资源跳转</p><p>步骤：</p><p>1、通过request对象获取请求转发对象：RequestDispatcher</p><p>2、调用转发对象的forward()方法进行转发</p><p>特点：</p><p>1、浏览器地址栏不发生变化</p><p>2、只能转发当前服务器内部资源</p><p>3、转发是一次请求，无论内部跳转多少次，调用几个Servlet，它使用的是同一次请求</p><p>共享数据：</p><p>1、域对象：一个有作用范围的对象，它可以在范围内共享对象</p><h3 id="Request和Response"><a href="#Request和Response" class="headerlink" title="Request和Response"></a>Request和Response</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210714145054690.png" alt="image-20210714145054690"></p><h2 id="3、Http响应-响应消息"><a href="#3、Http响应-响应消息" class="headerlink" title="3、Http响应-响应消息"></a>3、Http响应-响应消息</h2><h3 id="1-1、概述："><a href="#1-1、概述：" class="headerlink" title="1.1、概述："></a>1.1、概述：</h3><p>服务器发给客服端的消息</p><h3 id="1-2组成"><a href="#1-2组成" class="headerlink" title="1.2组成"></a>1.2组成</h3><p>1.响应行</p><p>2.响应头</p><p>3.响应空格</p><p>4.响应体</p><h3 id="1-3响应行"><a href="#1-3响应行" class="headerlink" title="1.3响应行"></a>1.3响应行</h3><p>http/1.1 200(相应描述)</p><p>1、组成：协议/版本号 响应状态码</p><p>2.响应状态码：</p><p>1XX：服务器接收客服端消息，但没完成接收，等待一段时间后，会向客户端发送1XX，询问是否继续发送消息</p><p>2XX：成功，代表：200</p><p>3XX：重定向，资源的跳转方式，代表：302重方向，304-访问缓存</p><p>4XX：客户端错误，比如访路径有问题，找不到资源，会出现404</p><p>5XX：服务器错误，如果代码出现异常，会出现500</p><h3 id="1-4响应头："><a href="#1-4响应头：" class="headerlink" title="1.4响应头："></a>1.4响应头：</h3><p>1.Content-Type：服务器告诉浏览器本次响应的格式和编码格式</p><p>2.Content-disposition:服务器告诉客户端以什么格式打开响应数据，如果没有设置，用默认值</p><p>in-line：默认值，在当前页面内打开</p><p>attchment;filename=XXX;以附件形式打开响应体，即下载文件</p><h2 id="4、Response对象"><a href="#4、Response对象" class="headerlink" title="4、Response对象"></a>4、Response对象</h2><p>1、设置状态码:setStatus(int sc)</p><p>2、设置响应头：setHeader(String name,String value)</p><p>3、设置过响应体：</p><p>​    1、获取输出流</p><p>​    2、通过输出流将数据输出到客户端浏览器</p><p>4、转发和重定向的特点：</p><p><strong>1、转发：</strong></p><p>​        地址栏路径不发生变化</p><p><strong>2、重定向</strong></p><p>​        地址栏发送变化</p><p>​        多次请求，所以不能通过request对象共享数据</p><p>​        可以访问其他服务器资源</p><p><strong>3.路径写法</strong>：</p><p>分类：</p><p>​    <strong>相对路径</strong>：以当前资源为起点，到目标资源所需要的路径</p><p>​            ../开头    （../表示上一级目录）</p><p>​    绝对路径：以/开头</p><p><strong>localhost：</strong>8080/虚拟路径，这部分内容是固定的，所以可以省略</p><p><strong>判断路径给谁用</strong></p><p>​    如果是给服务器用，则不需要加虚拟路径    比如：转发</p><p>​    如果是给浏览器用的，需要加虚拟路径</p><h2 id="5、ServletContext对象"><a href="#5、ServletContext对象" class="headerlink" title="5、ServletContext对象"></a>5、ServletContext对象</h2><h3 id="5-1概述"><a href="#5-1概述" class="headerlink" title="5.1概述"></a>5.1概述</h3><p>​    它代表整个web应用，是servlet中最大的一个接口</p><h3 id="5-2获取"><a href="#5-2获取" class="headerlink" title="5.2获取"></a>5.2获取</h3><p>1.通过request对象获取</p><p>​    req.getServletContext();</p><p>2.通过HttpServlet对象获取</p><p>​        this.getServletContext();</p><h3 id="5-3域对象"><a href="#5-3域对象" class="headerlink" title="5.3域对象"></a>5.3域对象</h3><p>所以能共享数据，他的作用是最大的，所有用户的所用数据</p><h3 id="5-4获取MIME类型"><a href="#5-4获取MIME类型" class="headerlink" title="5.4获取MIME类型"></a>5.4获取MIME类型</h3><p>1、MIME类型：在互联网通信中定义的一种文件类型</p><p>2、格式：大数据类型/小数据类型，比如text/html</p><p>3、获取：getMimeType(String fileName)通过文件扩展名</p><p>4、扩展名对应的Mime</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xatu.Demo;<br><br><span class="hljs-keyword">import</span> javax.servlet.Servlet;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Class_NAME</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Lenovo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/RequestDemo4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取文件夹</span><br>        String filename=req.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);<br>        ServletContext servletContext=req.getServletContext();<br>        String path=servletContext.getRealPath(<span class="hljs-string">&quot;/img/&quot;</span>+filename);<br>        resp.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+filename);<br><br>        FileInputStream inputStream=<span class="hljs-keyword">new</span> FileInputStream(path);<br>        ServletOutputStream outputStream=resp.getOutputStream();<br><br>        <span class="hljs-comment">//读取</span><br>        <span class="hljs-keyword">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len=inputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>            outputStream.write(bytes,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        inputStream.close();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="6-会话技术"><a href="#6-会话技术" class="headerlink" title="6.会话技术"></a>6.会话技术</h2><h3 id="1-1-概述："><a href="#1-1-概述：" class="headerlink" title="1.1.概述："></a>1.1.概述：</h3><p>一次会话包含多次请求和响应，并且可以在会话范围内可以共享数据</p><h3 id="1-2功能"><a href="#1-2功能" class="headerlink" title="1.2功能"></a>1.2功能</h3><p>共享</p><h3 id="1-3分类"><a href="#1-3分类" class="headerlink" title="1.3分类"></a>1.3分类</h3><p>客户端：Cookie</p><p>服务端：Session</p><h3 id="1-4Cookie"><a href="#1-4Cookie" class="headerlink" title="1.4Cookie"></a>1.4Cookie</h3><p><strong>常用方法</strong>：</p><p>1.创建Cookie对象new Cookie（String name,String value）</p><p>2.发送Cookie：response.addCookie(String name)</p><p>3.获取Cookie对象：request.getCookies()</p><p><strong>注意事项</strong>:</p><p>1.发送多个Cookie：创建多个Cookie对象。多次调用resp.addCookie()</p><p>2.保存时长</p><p>​        默认情况下：浏览器关闭，Cookie数据被销毁</p><p>​        setMaxAge(int seconds)</p><p>​        <strong>正数</strong>：将Cookie数据写到硬盘文件中持续化储存，seconds表示存储文件的时长，单位为秒</p><p>​        <strong>负数：</strong>默认值</p><p>​        <strong>0：</strong>删除cookie信息</p><p>3.Tomcat 8之前，不能之间存储中文数据</p><p>4.Cookie获取范围</p><p>​    同一服务器多个web项目</p><p> 默认情况下，一个服务器的多个web项目不能共享数据</p><p>我们可以通过setPath(“/“)来实现多个web项目共享</p><p>不同服务器</p><p>​    通过setDomain()方法，设置相同的一级域名，那么在相同的一级域名下Cookie可以实现数据共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xatu.Demo;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.xml.crypto.Data;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Class_NAME</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Lenovo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/Cookie3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charSet=utf-8&quot;</span>);<br>        <span class="hljs-comment">//1、获取所用Cookie信息</span><br>        Cookie[] cookies = req.getCookies();<br><br>        <span class="hljs-comment">//2、遍历cookie</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<span class="hljs-comment">//用于标识是否有lastTime</span><br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span> &amp;&amp; cookies.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-comment">//3、获取cookie名称</span><br>                String name = cookie.getName();<br>                <span class="hljs-comment">//4、判段</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;lastTime&quot;</span>.equals(name)) &#123;<br>                    <span class="hljs-comment">//存在，不是第一次</span><br>                    <span class="hljs-comment">//4.1获取lastTime对应的值，并响应</span><br>                    String value = cookie.getValue();<br><br>                    <span class="hljs-comment">//URL解码</span><br>                    value= URLDecoder.decode(value,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                    resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;您上一次登录的时间：&quot;</span> + value + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br><br><br>                    <span class="hljs-comment">//4.2 更新lastTime的值</span><br>                    Date date = <span class="hljs-keyword">new</span> Date();<br>                    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日-hh时mm分ss秒&quot;</span>);<br>                    String format = sdf.format(date);<br>                    cookie.setValue(format);<br>                    <span class="hljs-comment">//设置存活时长</span><br>                    cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>                    <span class="hljs-comment">//4.4发送cookie</span><br>                    resp.addCookie(cookie);<br>                    flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//5.第一次访问</span><br>        <span class="hljs-keyword">if</span> (cookies == <span class="hljs-keyword">null</span> || cookies.length == <span class="hljs-number">0</span> || flag == <span class="hljs-keyword">false</span>) &#123;<br>            <span class="hljs-comment">//5.1获取当前时间</span><br>            Date date = <span class="hljs-keyword">new</span> Date();<br>            SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>            String format = sdf.format(date);<br>             format= URLEncoder.encode(format,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-comment">//</span><br>            Cookie cookie=<span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastTime&quot;</span>,format);<br>            <span class="hljs-comment">//5.3设置时长</span><br>            cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>);<br>            <span class="hljs-comment">//5.4发送cookie</span><br>            resp.addCookie(cookie);<br>            flag=<span class="hljs-keyword">true</span>;<br>            <span class="hljs-comment">//5.5响应</span><br>            format= URLEncoder.encode(format,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;这是第一次访问的时间：&quot;</span>+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><p>1.cookie存储数据在客户端浏览器,s所以它是不安全的</p><p>2.大小限制：每个Cookie大小4kb,同一域名下，Cookie数量不超过20个</p><p><strong>作用：</strong></p><p>1、存储少量，内容不敏感的数据</p><p>2、在不登陆的情况下，完成服务器对用户信息的识别（主要用途）</p><h2 id="7、JSP"><a href="#7、JSP" class="headerlink" title="7、JSP"></a>7、JSP</h2><p><strong>概念：</strong>JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成<a href="https://baike.baidu.com/item/HTML">HTML</a>、<a href="https://baike.baidu.com/item/XML">XML</a>或其他格式文档的<a href="https://baike.baidu.com/item/Web">Web</a>网页，然后返回给请求者。JSP技术以<a href="https://baike.baidu.com/item/Java">Java</a>语言作为<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>，为用户的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。</p><h3 id="7-3Jsp内置对象"><a href="#7-3Jsp内置对象" class="headerlink" title="7.3Jsp内置对象"></a>7.3Jsp内置对象</h3><p><strong>概述：</strong></p><p>​    在jsp页面中，不需要创建和获取，可以直接使用的对象</p><p>对象：</p><p>1、session</p><p>2、out</p><p>3.page</p><p>4、application</p><p>5、config</p><p>6、exception</p><p>7.pageContext</p><p>8.Request</p><p>9.Response</p><h3 id="7-4Session"><a href="#7-4Session" class="headerlink" title="7.4Session"></a>7.4Session</h3><p><strong>概述：</strong></p><p>​    服务器端会话技术</p><p><strong>功能</strong>：</p><p>​    1、获取HttpSession对象：request.getSession()</p><p>​    2、使用HttpSession对象：</p><p>​        SetAttribute</p><p>​        getAttribute</p><p>​        removeAttribute</p><p><strong>实现原理：</strong></p><p>Serrion的实现是依赖于Cookie</p><p>第一次发送请求，服务器会创建Session对象，并设置唯一的id属性，并在响应时，将Session对象对应的ID存入响应头；</p><p>set.cookie:JSESSIONID=id属性</p><p>当第二次发送请求时，cookie中就有对应的session id，web服务器读取请求头数据后，会将两次会话中使用的session对象指向同一个session对象</p><p><strong>注意：</strong></p><p>1、客户端浏览器关闭后，再次打开，获取的对象是同一个吗？</p><p>​    默认情况下，因为浏览器关闭，Cookie会被清空</p><p>2、服务器重启时，两个会话的session时同一个吗？</p><p>​    因为服务器重启，session会被清空，所以很难得到同一个session对象</p><p>解决：session的钝化和活化</p><p>​        钝化：将session的数据序列化磁盘上</p><p>​        活化：在服务器启动后，将session文件序列化session对象后即可</p><p>3、session什么时候销毁：</p><p>​    服务器关闭</p><p>4、特点：</p><p>session对象用于存储一次会话中多次请求的数据，存储在服务器端</p><p>session可以存储任意类型的数据，任意大小的数据</p><p>5、session可cookie的区别：</p><p>session存储在服务器端，cookie存储在客户端</p><p>session的数据比较安全，cookie的数据不安全</p><p>cookie的大小有限制，session的大小没限制</p><h3 id="7-5JSP指令"><a href="#7-5JSP指令" class="headerlink" title="7.5JSP指令"></a>7.5JSP指令</h3><p>作用：</p><p>用于配置Jsp页面，导入资源文件</p><p>格式：</p><p>&lt;%@指令名称 属性名1=属性值1…%&gt;</p><p>分类：‘</p><p>1、page用于配置jsp页面</p><p>2、includ：页面包含</p><p>3、taglib：导入资源文件，Jstl标签，就需要使用该指令导入</p><h3 id="7-6MVC开发模式"><a href="#7-6MVC开发模式" class="headerlink" title="7.6MVC开发模式"></a>7.6MVC开发模式</h3><p>1、MVC</p><p>M-Model模型 Javabean</p><p>​        完成具体业务操作：查数据库，封装对象</p><p>V-View视图层JSP HTML</p><p>​    用于展示数据</p><p>C-controller控制层Servlet与业务逻辑的</p><p>​        获取用户请求、</p><p>​        调用模型</p><p>​        将数据交给视图层展示</p><h3 id="7-7、E-L表达式"><a href="#7-7、E-L表达式" class="headerlink" title="7.7、E-L表达式"></a>7.7、E-L表达式</h3><p>语法：</p><p>${}</p><p>使用：</p><p>1、运算</p><p>2、取值</p><p>E-L表达式可以从与对象中获取</p><p>语法：${域对象名：域名}</p><p>隐式对象：</p><p>1、E-L表达式中可以直接使用的对象</p><h3 id="7-8、JSTL标签"><a href="#7-8、JSTL标签" class="headerlink" title="7.8、JSTL标签"></a>7.8、JSTL标签</h3><p>JSTL：java Servlet Page Tage Library JSp标签库</p><p>1、使用</p><p>​        导入jsp相关jar包</p><p>​        导入标签库：taglib指令</p><p>2、c:if标签</p><p>   test属性是必须的，属性值为true，则显示该标签页包裹的静态内容，为flase则不显示标签包裹的内容</p><p> c:if没有else，如果是多个选择分支，则写多个c:if即可</p><p>3.choose标签</p><p>4.c:foreach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>（<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++）<br><br>​属性：<br><br>​begin：开始值（包含）<br><br>​end：结束值（包含）<br><br><span class="hljs-keyword">var</span>：i<br><br>step：步长<br><br>varStatus:在普通<span class="hljs-keyword">for</span>循环中和<span class="hljs-keyword">var</span>相同含义<br>    index:索引<br>     count：循环次数   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/myblog/2021/10/04/hello-world/"/>
    <url>/myblog/2021/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/myblog/2021/09/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/myblog/2021/09/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="第一章：指针"><a href="#第一章：指针" class="headerlink" title="第一章：指针"></a>第一章：指针</h2><p>定义变量：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">int num=<span class="hljs-number">19</span>;<span class="hljs-regexp">//</span>值，变量名 地址； 数据类型 --&gt;<span class="hljs-number">4</span>字节<br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.数据如何保存到计算机内存中<br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>.程序如何在计算机找到这个数据？ 通过该变量的地址<br></code></pre></td></tr></table></figure><h3 id="1-1-取地址运算符“-amp-”"><a href="#1-1-取地址运算符“-amp-”" class="headerlink" title="1.1 取地址运算符“&amp;”"></a>1.1 取地址运算符“&amp;”</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span> <span class="hljs-comment">//包含一个头文件 std:标准的。i:input o:out  h:头文件</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">19</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num的地址：%d&quot;</span>，&amp;num); <span class="hljs-comment">//%d十进制</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num的地址：%x&quot;</span>，&amp;num); <span class="hljs-comment">//%x十六进制</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//程序结束，可以省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2指针的概念"><a href="#1-2指针的概念" class="headerlink" title="1.2指针的概念"></a>1.2指针的概念</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">指针就是一个变量，它的值就是另一个变量的地址<br>数据结构 *变量名； <span class="hljs-comment">//定义了一个指针</span><br><span class="hljs-keyword">int</span>*p; <span class="hljs-comment">//定义了一个指针变量，他保存了另一个int类型的变量的地址</span><br>指针保存了谁的地址，就说她指向谁。<br></code></pre></td></tr></table></figure><h3 id="1-3-指针的基本使用"><a href="#1-3-指针的基本使用" class="headerlink" title="1.3 指针的基本使用"></a>1.3 指针的基本使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">操作：<br><span class="hljs-number">1.</span>定义一个指针变量；<br><span class="hljs-number">2.</span>定义一个普通变量；<br><span class="hljs-number">3.</span>让指针变量指向普通变量。（普通变量的地址赋值给指针变量）    <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">*:取值运算符 *地址=值<br>&amp;：取地址运算法&amp;变量=地址    <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span> <span class="hljs-comment">//包含一个头文件 std:标准的。i:input o:out  h:头文件</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> *p;<span class="hljs-comment">//1.定义指针变量</span><br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">19</span>;<span class="hljs-comment">//2.定义一个普通变量；</span><br>    p =&amp;num;<span class="hljs-comment">//3.让指针变量指向普通变量</span><br>    <br>    <span class="hljs-comment">//得到num变量的地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num的地址：%d\n&quot;</span>，&amp;num); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num的地址：%d\n&quot;</span>，p); <br>    <span class="hljs-comment">//得到num变量的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(&amp;num));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//程序结束，可以省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-NULL地址"><a href="#1-4-NULL地址" class="headerlink" title="1.4 NULL地址"></a>1.4 NULL地址</h3><p>在指针变量进行定义的时候，如果没有明确的地址进行复制，可以为指针变量赋值一个NULL.</p><p>空指针：指向NULL的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-literal">NULL</span> --&gt;<span class="hljs-number">0</span> --&gt;<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> *p=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p);<br>    <span class="hljs-keyword">if</span>(!p)&#123;<span class="hljs-comment">//可以使用NULL指针进行逻辑判断。NULL--&gt;false 非NULL-&gt;true</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p为空！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：交换两个数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> b=<span class="hljs-number">20</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>,a,b);<br>    <br>    <span class="hljs-keyword">int</span> temp;<br>    temp=a;<br>    a=b;<br>    b=c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>,a,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> b=<span class="hljs-number">20</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>,a,b);<br>    <br>    a=a^b;<br>    b=a^b;<br>    a=a^b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>,a,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> *p1,*p2;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-指针变量可以作为函数的参数和返回值"><a href="#2-指针变量可以作为函数的参数和返回值" class="headerlink" title="2.指针变量可以作为函数的参数和返回值"></a>2.指针变量可以作为函数的参数和返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aswd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,*p2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> *point1,*point2;<br>    point1=&amp;a;<br>    point2=&amp;b;<br>    <br>    <span class="hljs-keyword">if</span>(a&gt;b)&#123;<br>        aswd(point1,point2);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d&quot;</span>,a,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>作业：输入三个整数，按从大到小排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2)</span></span>&#123;<br><span class="hljs-keyword">int</span> p;<br>p=*p1;<br>*p1=*p2;<br>*p2=p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *q1,<span class="hljs-keyword">int</span> *q2,<span class="hljs-keyword">int</span> *q3)</span></span>&#123;<br><span class="hljs-keyword">if</span>(*q1&lt;*q2) f1(q1,q2);<br><span class="hljs-keyword">if</span>(*q1&lt;*q3) f1(q1,q3);<br><span class="hljs-keyword">if</span>(*q2&lt;*q3) f1(q2,q3);<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> a,b,c,*r1,*r2,*r3;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>r1=&amp;a;r2=&amp;b;r3=&amp;c;<br>f2(r1,r2,r3);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d\n&quot;</span>,*r1,*r2,*r3);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-指针和数组"><a href="#3-指针和数组" class="headerlink" title="3.指针和数组"></a>3.指针和数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> num[] =&#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">45</span>,<span class="hljs-number">56</span>&#125;；<br>    <span class="hljs-comment">//数组名 代表首元素的地址 num ==&amp;num[0]</span><br>    num+<span class="hljs-number">0</span>=&amp;num[<span class="hljs-number">0</span>]<br>    num+<span class="hljs-number">1</span>=&amp;num[<span class="hljs-number">1</span>]<br>    num+<span class="hljs-number">2</span>=&amp;num[<span class="hljs-number">2</span>]<br>    num+<span class="hljs-number">3</span>=&amp;num[<span class="hljs-number">3</span>]<br>    num+<span class="hljs-number">4</span>=&amp;num[<span class="hljs-number">4</span>]<br>    <br>   *(num+<span class="hljs-number">0</span>)=*(&amp;num[<span class="hljs-number">0</span>])=<span class="hljs-number">12</span><br>   *(num+<span class="hljs-number">1</span>)=*(&amp;num[<span class="hljs-number">1</span>])=<span class="hljs-number">23</span><br>   *(num+<span class="hljs-number">2</span>)=*(&amp;num[<span class="hljs-number">2</span>])=<span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num[] =&#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">45</span>,<span class="hljs-number">56</span>&#125;；<br>    <span class="hljs-comment">//首元素的地址  </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,); <br>    <br>    <span class="hljs-comment">//下标为1的地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num+<span class="hljs-number">1</span>); <span class="hljs-comment">//地址的+ -不是简单的地址+ -</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,&amp;num[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指针数组：保存指针的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 3</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> var[]=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>&#125;;<br>    <span class="hljs-keyword">int</span> *ptr[MAX];<span class="hljs-comment">//指针数组，保存了3个指针</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MAX;i++)&#123;<br>    ptr[i]=var+i;<br>    &#125;<br>    <span class="hljs-comment">//var var+1 var+2</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MAX;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*ptr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>       <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> str[]=<span class="hljs-string">&quot;hello&quot;</span>;<span class="hljs-comment">//字符数组表示字符串</span><br>str[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;h&#x27;</span>;<br>str=&amp;str[<span class="hljs-number">0</span>]=h的地址<br><span class="hljs-keyword">char</span> *strs[]=&#123;<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;nihao&quot;</span>,<span class="hljs-string">&quot;swdk&quot;</span>&#125;;字符串数组<br></code></pre></td></tr></table></figure><h3 id="4-指针的运算"><a href="#4-指针的运算" class="headerlink" title="4.指针的运算"></a>4.指针的运算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">+ - ++ --算术运算符<br>&gt; &gt;= &lt; &lt;= == != 关系运算    <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> var[]=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-keyword">int</span> *p;<br>    p=var;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//指针运算不是数字的运算，是地址的偏移量</span><br></code></pre></td></tr></table></figure><h3 id="5-指向指针的指针"><a href="#5-指向指针的指针" class="headerlink" title="5.指向指针的指针"></a>5.指向指针的指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> *p1=&amp;num;<br>    <span class="hljs-keyword">int</span> **p2=&amp;p1;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,**p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二章：结构体"><a href="#第二章：结构体" class="headerlink" title="第二章：结构体"></a>第二章：结构体</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">假设现在：2：44<br>再加上：1:32分<br>后是：？<br>    44+<span class="hljs-attribute">32</span>=76-60=16<br>    2+1+<span class="hljs-attribute">1</span>=4<br>    4：16<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> now_h=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> now_m=<span class="hljs-number">44</span>;<br>    <br>    <span class="hljs-keyword">int</span> add_h=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> add_m=<span class="hljs-number">32</span>;<br>    <br>    <span class="hljs-keyword">int</span> f_h=now_h+add_h+(now_m+add_m)/<span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">int</span> f_m=(now_m+add_m)%<span class="hljs-number">60</span>;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d&quot;</span>,f_h,f_m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-结构体的定义"><a href="#1-结构体的定义" class="headerlink" title="1.结构体的定义"></a>1.结构体的定义</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs fortran">类：具有相同属性和行为的某一事物的总称。<br>对象：是类的具体体现<br>数据类型 变量名=值；<br>User :引用数据类型<br><br>类：具有相同属性和行为的数据类型。可以定义变量（对象）。<br><br>结构体：就是具有相同属性（成员变量）的一个数据类型。<br>（成员变量）：<span class="hljs-built_in">int</span> <span class="hljs-keyword">double</span> <span class="hljs-built_in">char</span>...List(基本类型 引用类型)<br>结构体：就是有很多个（基本类型 复杂类型）组合成的一种复杂的数据类型。<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> &#123;<br><span class="hljs-built_in">int</span> id;<br>String <span class="hljs-keyword">name</span>;<br>String <span class="hljs-keyword">pass</span>;<br>Teacher teaId;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-结构体的声明"><a href="#1-1-结构体的声明" class="headerlink" title="1.1 结构体的声明"></a>1.1 结构体的声明</h4><p>声明结构体用 struct 关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体类型名&#123;</span><br>    成员变量；<br>&#125;；        <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//声明结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span>&#123;</span><span class="hljs-comment">//数据类型 什么类型--&gt;struct time类型</span><br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">int</span> m;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">now</span>=</span>&#123;<span class="hljs-number">2</span>,<span class="hljs-number">44</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d\n&quot;</span>,now.h,now.m);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">add</span>=</span>&#123;<span class="hljs-number">1.32</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d&quot;</span>,now.h+add.h+(now_m+add_m)/<span class="hljs-number">60</span>,(now_m+add_m)%<span class="hljs-number">60</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-结构体的初始化"><a href="#1-2-结构体的初始化" class="headerlink" title="1.2 结构体的初始化"></a>1.2 结构体的初始化</h4><h3 id="2-结构体数组"><a href="#2-结构体数组" class="headerlink" title="2.结构体数组"></a>2.结构体数组</h3><h3 id="3-结构体指针"><a href="#3-结构体指针" class="headerlink" title="3.结构体指针"></a>3.结构体指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span>&#123;</span><br>    <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">char</span> sex[<span class="hljs-number">15</span>];<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">alan</span>=</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Alan&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;man&quot;</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-结构体和函数"><a href="#4-结构体和函数" class="headerlink" title="4.结构体和函数"></a>4.结构体和函数</h3><p>结构体变量或结构体指针作为函数的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//声明结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span>&#123;</span><span class="hljs-comment">//数据类型 什么类型--&gt;struct time类型</span><br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">int</span> m;<br>&#125;;<br><span class="hljs-function">struct time <span class="hljs-title">addTime</span><span class="hljs-params">(struct time now,struct time add)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">f</span>;</span><br>    f.h=now.h+add.h+(now.m+add.m)/<span class="hljs-number">60</span>;<br>    f.m=(now.m+add.m)%<span class="hljs-number">60</span>;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">now</span>=</span>&#123;<span class="hljs-number">2</span>,<span class="hljs-number">44</span>&#125;;<br>    <span class="hljs-comment">//printf(&quot;%d:%d\n&quot;,now.h,now.m);</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time</span> <span class="hljs-title">add</span>=</span>&#123;<span class="hljs-number">1.32</span>&#125;;<br>    <span class="hljs-function">struct <span class="hljs-title">addTime</span><span class="hljs-params">(now,add)</span></span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d&quot;</span>,f.h,f.m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用结构体和函数，计算两点间的距离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getDistance</span><span class="hljs-params">(struct point a,struct point b)</span></span>&#123;<br><span class="hljs-keyword">double</span> d;<br>d=<span class="hljs-built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">a</span>,<span class="hljs-title">b</span>;</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a.x,&amp;a.y);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;b.x,&amp;b.y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>,getDistance(a,b));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三章：动态内存分配"><a href="#第三章：动态内存分配" class="headerlink" title="第三章：动态内存分配"></a>第三章：动态内存分配</h2><h3 id="1-动态内存和静态内存"><a href="#1-动态内存和静态内存" class="headerlink" title="1.动态内存和静态内存"></a>1.动态内存和静态内存</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.静态内存<br>程序开始运行的时候，由编译器分配的内存。在程序<br></code></pre></td></tr></table></figure><h3 id="2-如何分配动态内存"><a href="#2-如何分配动态内存" class="headerlink" title="2.如何分配动态内存"></a>2.如何分配动态内存</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino">无中生有：<br><span class="hljs-number">1.</span><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">malloc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>; <span class="hljs-comment">//size&gt;=0</span><br><span class="hljs-keyword">void</span> * --&gt;可以转换为任意类型的指针<br><br>注意：内存可能分配失败。内存不够<br><span class="hljs-keyword">char</span> *a;<br>a=(<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>));<br><span class="hljs-number">2.</span>扩容<br>之前有，现在不够--&gt;扩容<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">realloc</span><span class="hljs-params">(谁扩容，<span class="hljs-keyword">int</span> size)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">a</span>=(<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">realloc</span>(a,<span class="hljs-number">10</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>)+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//失败了 a==NULL</span><br><span class="hljs-keyword">if</span>(!a)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败&quot;</span>)；<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-动态内存的释放"><a href="#3-动态内存的释放" class="headerlink" title="3.动态内存的释放"></a>3.动态内存的释放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *p)</span></span>;<span class="hljs-comment">//参数是任意类型的指针。</span><br><span class="hljs-built_in">free</span>(a);<br></code></pre></td></tr></table></figure><h2 id="第四章：数据结构与算法"><a href="#第四章：数据结构与算法" class="headerlink" title="第四章：数据结构与算法"></a>第四章：数据结构与算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c">数据结构与算法<br>特点：不能偷懒，重在积累，比较难。图文并茂<br>No picture you say ge p a<br>    什么数据结构：研究非数值计算的程序设计中的对象，以及他们之间的关系和操作符等相关的运算符相关问题的一门学科。总体来说：程序设计=数据结构+算法<br>    数据结构就是关系。数据元素之间存在的一种或者多种特定的关系的集合。<br>    在传统上来说：数据结构分为逻辑结构和物理结构<br>    逻辑结构：数据元素之间的相互关系。重点<br>    物理结构：数据的逻辑结构在计算机中实际的储存方式。<br>    <br>    四大逻辑结构：<br>    集合结构：数据元素之间除了同处一个集合之外，<br>    线性结构：数据元素之间存在一对一关系<br>    树形结构：金字塔关系。数据元素之间存在一对多关系<br>    图形结构：数据元素之间存在多对多的关系。<br>    二大物理结构<br>    顺序的存储：数据元素之间他们的地址是连续的。<br>    链式的存储：数据元素之间他们的地址是随机的。<br><br>算法<br>解决特定问题的求解步骤的描述，在计算机中表现为指令的有限的序列。并且每条指令都表示为一个或者多个操作。解决问题的方法。<br>体验一个算法：<br>数组[abcdef] 左半部分和右半部分交换位置。[ef abcd]<br><span class="hljs-number">1.</span>将数组的前半部分逆序[dcba ef]<br><span class="hljs-number">2.</span>将数组的后半部分逆序[dcba fe]<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">void</span> first(<span class="hljs-keyword">char</span> c[<span class="hljs-number">6</span>])&#123;<br><span class="hljs-comment">//abcd bcda dcba cdba</span><br><span class="hljs-comment">//      3     2     1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>；i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>-i;j++)&#123;<br><span class="hljs-keyword">char</span> temp;<br>temp=c[j];<br>c[j]=c[j+<span class="hljs-number">1</span>];<br>c[j+<span class="hljs-number">1</span>]=temp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,c[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> c[]=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>&#125;;<br>first(c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>算法的<span class="hljs-number">5</span>个基本特征：<br>    输入性：具有<span class="hljs-number">0</span>个或者多个输入。<br>    输出性：具有<span class="hljs-number">1</span>个或者多个输出。<br>    有穷性：步骤是有限的。具有有限的步骤能得到结果。<br>    确定性：每一步都有特定的含义。不能出现二义性。<br>    可行性：每一步都必须可行。<br>    <br>算法的效率：算法的执行时间，执行时间越短，效果越好。<br>    如何得到程序的执行时间：<br>    事后统计法：用程序去测定程序。<br>    缺点：要增加时间，测定程序时间需要时间执行；<br>    测得不准，同一程序在两台机器中执行的时间肯定不一样。<br>    i3+<span class="hljs-number">2</span>GB<br>    i7+<span class="hljs-number">32</span>GB<br>    <br>    事前估算：<br>    <span class="hljs-number">1.</span>算法采用的策略<br>    <span class="hljs-number">2.</span>编译产生的代码质量<br>    <span class="hljs-number">3.</span>问题的输入规模。<span class="hljs-number">10</span>的累加。<span class="hljs-number">1000</span>的累加<br>    <span class="hljs-number">4.</span>机器的算力。（环境）<br>    一个算法的执行时间依赖问题的输入规模。<br>    <br>    案例：<span class="hljs-number">100</span>的累加<br>    <span class="hljs-comment">//1.</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i+=)&#123; <span class="hljs-comment">//n+1</span><br>            sum+=i;<br>        &#125;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>&#125;<br><span class="hljs-comment">//执行2n+3次</span><br><span class="hljs-comment">//和n的大小有关，n越大执行的时间越长。n 就是问题的输入规模</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> sum=(<span class="hljs-number">1</span>+n)*n/<span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>&#125;   <br><span class="hljs-comment">//2次</span><br><br>将程序的执行时间替换为语句的执行次数，所以以后看程序的执行时间，就看程序语句，从而进行估算<br></code></pre></td></tr></table></figure><h2 id="第五章：线性表"><a href="#第五章：线性表" class="headerlink" title="第五章：线性表"></a>第五章：线性表</h2><h3 id="1-线性表的定义"><a href="#1-线性表的定义" class="headerlink" title="1.线性表的定义"></a>1.线性表的定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">线性表：List，由<span class="hljs-number">0</span>个或者多个数据元素组成的有限的序列。<br>注意：<br>    <span class="hljs-number">1.</span>数据元素之间是由先来后到的。<br>    <span class="hljs-number">2.</span>假设有多个数据元素，第一个元素没有前驱，最后一个元素没有后继，其他元素只有一个前驱和一个后继。<br>    <span class="hljs-number">3.</span>有限的序列。<br>    <br>    公司的组织架构：不是线性结构 成绩的排名：是线性结构<br></code></pre></td></tr></table></figure><h3 id="2-抽象数据类型"><a href="#2-抽象数据类型" class="headerlink" title="2.抽象数据类型"></a>2.抽象数据类型</h3><p>对基本数据类型进行抽象，JAVA中的类。将相关操作捆绑在一起就是抽象类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">ADT 抽象数据类型<br>Data<br>    数据元素之间的逻辑关系<br>Operation<br>    操作<br>endADT    <br></code></pre></td></tr></table></figure><p>线性表的抽象数据类型</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ADT List<br>Data<br>假设有多个数据类型，第一个元素没有前驱，最后一个元素没有后继，其它只有一个直接钱去和直接后继。<br>Operation<br><span class="hljs-constructor">InitList(<span class="hljs-operator">*</span>L)</span>:初始化操作<br><span class="hljs-constructor">ListEmpty(L)</span>:判读线性表是否为空<br>ClearList（*L）：清空线性表<br><span class="hljs-constructor">GetElem(L,<span class="hljs-params">i</span>,<span class="hljs-operator">*</span><span class="hljs-params">e</span>)</span>:将线性表L中的第i个元素保存到e中<br><span class="hljs-constructor">LocateElem(L,<span class="hljs-params">e</span>)</span>:在线性表L中查找与给定值e的相等的元素。如果查找<br><span class="hljs-constructor">ListInsert(<span class="hljs-operator">*</span>L,<span class="hljs-params">i</span>,<span class="hljs-params">e</span>)</span>:在线性表L的第i个位置元素插入元素e<br><span class="hljs-constructor">ListDelete(<span class="hljs-operator">*</span>L,<span class="hljs-params">i</span>,<span class="hljs-params">e</span>)</span>:删除线性表L的第i个元素的位置，该元素保存在e中。<br><span class="hljs-constructor">ListLength(L)</span>:长度<br>endADT<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">A:</span><span class="hljs-template-variable">&#123;za,ss,ki&#125;</span><span class="xml"></span><br><span class="xml">B:</span><span class="hljs-template-variable">&#123;za,ss,ui,ty&#125;</span><span class="xml"></span><br><span class="xml">AUB=</span><span class="hljs-template-variable">&#123;za,ss,ki,ui,ty&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(List La,List Lb)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> la_len=ListLength(La);<br>    <span class="hljs-keyword">int</span> lb_len=ListLength(Lb);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=lb_len;i++)&#123;<br>        GetElem(Lb,i,e);<br>        <span class="hljs-keyword">if</span>(!LocateElem(La,e))&#123;<br>            ListInsert(La,la_length,e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-线性表的存储结构"><a href="#3-线性表的存储结构" class="headerlink" title="3.线性表的存储结构"></a>3.线性表的存储结构</h3><h3 id="4-顺序表"><a href="#4-顺序表" class="headerlink" title="4.顺序表"></a>4.顺序表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">动态数组<br>除了要申请足够大小的物理空间之外；<br>1.顺序表申请存储容量（最多可以保存多少个数据）<br>2.顺序表的长度（数据的个数）<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Table</span>&#123;</span><br><span class="hljs-keyword">int</span> *head;<span class="hljs-comment">//动态数组</span><br><span class="hljs-keyword">int</span> size;<span class="hljs-comment">//存储容量</span><br><span class="hljs-keyword">int</span> length;<span class="hljs-comment">//长度</span><br>&#125;table;<br>    <span class="hljs-comment">//typedef int a;</span><br></code></pre></td></tr></table></figure><h4 id="4-1-初始化顺序表"><a href="#4-1-初始化顺序表" class="headerlink" title="4.1 初始化顺序表"></a>4.1 初始化顺序表</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-number">1.</span>动态数组还未创建<br>操作：动态数组申请空间<br><span class="hljs-number">2.</span><span class="hljs-built_in">size</span>和Length还没有值<br>操作：<span class="hljs-built_in">size</span>和<span class="hljs-built_in">length</span>初始化<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Size a5</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Table</span>&#123;</span><br><span class="hljs-keyword">int</span> *head;<span class="hljs-comment">//动态数组</span><br><span class="hljs-keyword">int</span> size;<span class="hljs-comment">//存储容量</span><br><span class="hljs-keyword">int</span> length;<span class="hljs-comment">//长度</span><br>&#125;table;<br>    <span class="hljs-comment">//顺序表的初始化</span><br><span class="hljs-function">table <span class="hljs-title">initTable</span><span class="hljs-params">()</span></span>&#123;<br>    table t;<br>    t.head=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(Size*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">//操作：动态数组申请空间</span><br>    <span class="hljs-keyword">if</span>(!t.head)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <br>    &#125;<br>    <span class="hljs-comment">//size和length的初始化</span><br>    t.size=Size;<br>    t.length=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> t;   <br>&#125;<br><span class="hljs-comment">//遍历数据的函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayTable</span><span class="hljs-params">(table t)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=t.length;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,t.head[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    table t=initTable();<br>    <span class="hljs-comment">//向数据表中添加数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;Size;i++)&#123;<br>        t.head[i<span class="hljs-number">-1</span>]=<span class="hljs-number">1</span>;<br>        t.length ++;<br>    &#125;<br>    displayTable(t);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-顺序表插入元素"><a href="#4-2-顺序表插入元素" class="headerlink" title="4.2 顺序表插入元素"></a>4.2 顺序表插入元素</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>.头插 <span class="hljs-comment">--移动</span><br><span class="hljs-number">2</span>.中间插<br><span class="hljs-number">3</span>.尾插入<br><br>用一种思路解决<span class="hljs-number">3</span>个位置：通过遍历，找到数据元素要插入的位置，<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*插入元素*/</span><br><span class="hljs-comment">//table t:要添加的那张顺序表</span><br><span class="hljs-comment">//int elem:要插入的元素</span><br><span class="hljs-comment">//int add:要插入的位置</span><br><span class="hljs-function">table <span class="hljs-title">adddTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> elem,<span class="hljs-keyword">int</span> add)</span></span>&#123;<br>    <span class="hljs-comment">//判断插入的位置是否有问题</span><br>    <span class="hljs-keyword">if</span>(add&gt;t.length+<span class="hljs-number">1</span> ||add&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;位置不合法！&quot;</span>)；<br>        <span class="hljs-keyword">return</span> t;    <br>    &#125;<br>    <span class="hljs-comment">//插入之前先判断顺序表是否已满。满了要扩容；不满直接插入</span><br>    <span class="hljs-keyword">if</span>(t.length==t.size)&#123; <span class="hljs-comment">//满了：扩容</span><br>        t.head=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">realloc</span>(t.head,(t.size+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>        <span class="hljs-keyword">if</span>(!t.head)&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存扩容失败。&quot;</span>);<br>           <span class="hljs-keyword">return</span> t;<br>        &#125;<br>        t.size+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//插入操作</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=t.length<span class="hljs-number">-1</span>;i&gt;=add<span class="hljs-number">-1</span>;i--)&#123;<br>        t.head[i+<span class="hljs-number">1</span>]=t.head[i];<br>    &#125;<br>    <span class="hljs-comment">//插入元素</span><br>    t.head[add<span class="hljs-number">-1</span>]=elem;<br>    t.length++;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>完整代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Size 5</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Table</span> &#123;</span><br>    <span class="hljs-keyword">int</span>* head;<span class="hljs-comment">//动态数组</span><br>    <span class="hljs-keyword">int</span> size;<span class="hljs-comment">//存储容量</span><br>    <span class="hljs-keyword">int</span> length;<span class="hljs-comment">//长度</span><br>&#125;table;<br><span class="hljs-comment">//顺序表的初始化</span><br><span class="hljs-function">table <span class="hljs-title">initTable</span><span class="hljs-params">()</span> </span>&#123;<br>    table t;<br>    t.head = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(Size * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">//操作：动态数组申请空间</span><br>    <span class="hljs-keyword">if</span> (!t.head) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//size和length的初始化</span><br>    t.size = Size;<br>    t.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-comment">//遍历数据的函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayTable</span><span class="hljs-params">(table t)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= t.length; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, t.head[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*插入元素*/</span><br><span class="hljs-comment">//table t:要添加的那张顺序表</span><br><span class="hljs-comment">//int elem:要插入的元素</span><br><span class="hljs-comment">//int add:要插入的位置</span><br><span class="hljs-function">table <span class="hljs-title">adddTable</span><span class="hljs-params">(table t, <span class="hljs-keyword">int</span> elem, <span class="hljs-keyword">int</span> add)</span> </span>&#123;<br>    <span class="hljs-comment">//判断插入的位置是否有问题</span><br>    <span class="hljs-keyword">if</span> (add &gt; t.length + <span class="hljs-number">1</span> || add &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;位置不合法！&quot;</span>);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-comment">//插入之前先判断顺序表是否已满。满了要扩容；不满直接插入</span><br>    <span class="hljs-keyword">if</span> (t.length == t.size) &#123; <span class="hljs-comment">//满了：扩容</span><br>        t.head = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">realloc</span>(t.head, (t.size + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>        <span class="hljs-keyword">if</span> (!t.head) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存扩容失败。&quot;</span>);<br>                <span class="hljs-keyword">return</span> t;<br>        &#125;<br>        t.size += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//插入操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = t.length - <span class="hljs-number">1</span>; i &gt;= add - <span class="hljs-number">1</span>; i--) &#123;<br>        t.head[i + <span class="hljs-number">1</span>] = t.head[i];<br>    &#125;<br>    <span class="hljs-comment">//插入元素</span><br>    t.head[add - <span class="hljs-number">1</span>] = elem;<br>    t.length++;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    table t1 = initTable();<br>    <span class="hljs-comment">//向数据表中添加数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= Size; i++) &#123;<br>        t1.head[i - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        t1.length++;<br>    &#125;<br>    displayTable(t1);<br>    table t2 = adddTable(t1, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>);<br>    displayTable(t2);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-顺序表的删除元素"><a href="#4-3-顺序表的删除元素" class="headerlink" title="4.3 顺序表的删除元素"></a>4.3 顺序表的删除元素</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">思路：先找到目标元素，将该元素后面的元素整体向前移动一个位置。<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*顺序表删除*/</span><br><span class="hljs-function">table <span class="hljs-title">delTable</span><span class="hljs-params">(table t,<span class="hljs-keyword">int</span> del)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(del)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-顺序表查找元素"><a href="#4-4-顺序表查找元素" class="headerlink" title="4.4 顺序表查找元素"></a>4.4 顺序表查找元素</h4><h4 id="4-5-顺序表更改元素"><a href="#4-5-顺序表更改元素" class="headerlink" title="4.5 顺序表更改元素"></a>4.5 顺序表更改元素</h4><h4 id="4-6-排序"><a href="#4-6-排序" class="headerlink" title="4.6 排序"></a>4.6 排序</h4><h3 id="5-单链表"><a href="#5-单链表" class="headerlink" title="5.单链表"></a>5.单链表</h3><p>案例：创建一个{1，2，3，4}，并且没有头结点的列表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Link</span>&#123;</span><br><span class="hljs-keyword">int</span> elem; <span class="hljs-comment">// 数据域</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Link</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">// 指针域，结构体指针</span><br>&#125;link;<br><br><span class="hljs-function">link * <span class="hljs-title">initLink</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//1.声明一个头指针</span><br>  link *p = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">// 创建首元节点</span><br>  link *temp = ( link * )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(link));<br>  temp-&gt;elem = <span class="hljs-number">1</span>;<br>  temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">// p 指针指向 首元节点</span><br>  p = temp;<br>  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>     link *a = ( link * )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(link));<br>     a-&gt;elem = i;<br>     a-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <br>     temp-&gt;next = a;<br>     temp = temp -&gt; next;<br>  &#125;<br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(link *p)</span></span>&#123;<br>  link *temp = p;<br>  <br>  <span class="hljs-keyword">while</span>(temp)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,temp-&gt;elem);<br>    temp = temp-&gt;next;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  link *p = initLink();<br>  display(p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-双向循环链表"><a href="#6-双向循环链表" class="headerlink" title="6.双向循环链表"></a>6.双向循环链表</h3><h3 id="7-栈"><a href="#7-栈" class="headerlink" title="7.栈"></a>7.栈</h3><h4 id="7-1链栈"><a href="#7-1链栈" class="headerlink" title="7.1链栈"></a>7.1链栈</h4><h4 id="7-2顺序栈"><a href="#7-2顺序栈" class="headerlink" title="7.2顺序栈"></a>7.2顺序栈</h4><h4 id="7-3进制转换器"><a href="#7-3进制转换器" class="headerlink" title="7.3进制转换器"></a>7.3进制转换器</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns">要求：用户提供需要进行转换的数据，以及要转换的进制。然后我的进制转换器会将要转换的数字转换为目标进制。<br><br>二进制：<span class="hljs-number">0101010101</span><br>八进制：<span class="hljs-number">01234567</span><br>十进制：<span class="hljs-number">0，1，2，3</span>，<span class="hljs-number">4，5，6，7</span>，<span class="hljs-number">8</span>，<span class="hljs-number">9</span><br>十六进制：<span class="hljs-number">0，1，2，3</span>，<span class="hljs-number">4，5，6，7</span>，<span class="hljs-number">8</span>，<span class="hljs-number">9</span>，<span class="hljs-keyword">A</span>,B,C,D,E,F<br>三十六进制：<span class="hljs-number">0</span>-<span class="hljs-number">9</span>，<span class="hljs-keyword">A</span>-Z<br></code></pre></td></tr></table></figure><p>顺序栈实现进制转换器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">int</span> top=<span class="hljs-number">-1</span>; <span class="hljs-comment">//top变量时刻表示栈顶元素的下标。 elem</span><br><span class="hljs-comment">//入栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a,<span class="hljs-keyword">char</span> elem)</span></span>&#123;<br><span class="hljs-keyword">if</span>(top==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    top--;<br>&#125;<br><span class="hljs-comment">//将各个进制的数字转换为10进制的数字</span><br><span class="hljs-comment">//FFF  char字母</span><br><span class="hljs-comment">//char *data:要转换的数字，int system:该数字的进制</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *data,<span class="hljs-keyword">int</span> system)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-built_in">strlen</span>(data)<span class="hljs-number">-1</span>;<span class="hljs-comment">//最后一个元素的下标</span><br>    <span class="hljs-keyword">int</span> system_10_data=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= k ;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">if</span>(data[i]&gt;=<span class="hljs-number">48</span> &amp;&amp; data[i]&lt;=<span class="hljs-number">57</span>)&#123; <span class="hljs-comment">//当前遍历的字符是数字。‘7’</span><br>           temp = data[i]<span class="hljs-number">-48</span>; <span class="hljs-comment">//将字符‘1’--&gt;1</span><br>        &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//当前遍历的是字母</span><br>           temp = data[i]<span class="hljs-number">-48</span>; <span class="hljs-comment">//将字母转换为数字</span><br>        &#125;<br>    system_10_data+=temp*<span class="hljs-built_in">pow</span>(system,(k-i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> system_10_data;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> *data=<span class="hljs-string">&quot;F&quot;</span>;<br><span class="hljs-keyword">int</span> value=change(data,<span class="hljs-number">16</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,value);<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="7-4-括号匹配法"><a href="#7-4-括号匹配法" class="headerlink" title="7.4 括号匹配法"></a>7.4 括号匹配法</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;&#125;<br><span class="hljs-comment">()</span><br>&#123;<span class="hljs-comment">()</span>&#125; <span class="hljs-comment">//  可以匹配上的</span><br><span class="hljs-comment">(&#123;)</span> <span class="hljs-comment">//不可以匹配</span><br>让用户从键盘中输入一串括号，我们程序就得到一个字符串。然后我们从左到右扫描到这个字符串，如果遇到（，&#123; 就入栈，如果遇到），&#125;，就直接和栈顶元素匹配，匹配成功，栈顶元素出栈，反之匹配失败。<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">int</span> top= <span class="hljs-number">-1</span>;<br><span class="hljs-comment">//入栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a,<span class="hljs-keyword">char</span> elem)</span></span>&#123;<br>a[++top]=elem;<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a)</span></span>&#123;<br><span class="hljs-keyword">if</span>(top==<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>top--;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a)</span></span>&#123;<br><span class="hljs-keyword">if</span>(top!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">return</span> a[top];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>; <br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> a[<span class="hljs-number">30</span>];<br>    <span class="hljs-keyword">char</span> kh[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入括号序列：&quot;</span>); <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,kh);<br>    <span class="hljs-keyword">int</span> len =<span class="hljs-built_in">strlen</span>(kh);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>    <span class="hljs-keyword">if</span>(kh[i]==<span class="hljs-string">&#x27;(&#x27;</span>|| kh[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>    push(a,kh[i]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(kh[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(GetTop(a)==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>pop(a);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号不匹配&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(GetTop(a)==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>pop(a);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号不匹配&quot;</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(top!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号不匹配&quot;</span>); <br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;匹配&quot;</span>); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-后缀表达式求值"><a href="#7-5-后缀表达式求值" class="headerlink" title="7.5 后缀表达式求值"></a>7.5 后缀表达式求值</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">当用户输入一个表达式的时候：<br><span class="hljs-built_in">char</span> *<span class="hljs-built_in">str</span> =<span class="hljs-string">&quot;3!+4*2/(1-5)^2&quot;</span>;<br> 前缀表达式：+ <span class="hljs-number">3</span> <span class="hljs-number">2</span><br> 中缀表达式：<span class="hljs-number">3</span> + <span class="hljs-number">2</span><br> 后缀表达式：<span class="hljs-number">3</span> <span class="hljs-number">2</span> +<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stack_num</span>&#123;</span><br>    <span class="hljs-keyword">double</span> data[MAXSIZE]; <span class="hljs-comment">// 数组栈的数组</span><br>    <span class="hljs-keyword">int</span> top; <span class="hljs-comment">// 栈顶元素的下标</span><br>&#125;Stack_num;<br><br><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack_num</span><span class="hljs-params">(Stack_num **S)</span></span>&#123;<br>    *S = (Stack_num *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Stack_num));<br>    (*S)-&gt;top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push_num</span><span class="hljs-params">(Stack_num **S,<span class="hljs-keyword">double</span> e)</span></span>&#123;<br>    <span class="hljs-comment">// 栈满的时候不能入栈</span><br>    <span class="hljs-keyword">if</span>((*S)-&gt;top == MAXSIZE<span class="hljs-number">-1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    (*S)-&gt;data[++(*S)-&gt;top] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop_num</span><span class="hljs-params">(Stack_num **S,<span class="hljs-keyword">double</span> *e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>((*S)-&gt;top == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *e = (*S)-&gt;data[(*S)-&gt;top];<br>    (*S)-&gt;top--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 计算后缀表达式的值</span><br><span class="hljs-comment">// char *postexp = &quot;3 ! 4 2 * 1 5 - 2 ^ / +\0&quot;;// \0字符串结束符</span><br><span class="hljs-comment">// 数字  运算符(! + - * / ^)  空格</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">computer</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *postexp)</span></span>&#123;<br>    Stack_num *num;<br>    InitStack_num(&amp;num);<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">double</span> result; <span class="hljs-comment">// 最终结果</span><br>    <span class="hljs-keyword">double</span> a,b;<br>    <span class="hljs-keyword">double</span> c;<span class="hljs-comment">// 中间计算的小结果</span><br>    <span class="hljs-keyword">double</span> d;<br>    <span class="hljs-comment">// 从左到右依次扫描表达式</span><br>    <span class="hljs-keyword">while</span>(*postexp != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-comment">// *postexp 当前字符</span><br>        <span class="hljs-keyword">switch</span>(*postexp)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                Pop_num(&amp;num,&amp;a);<br>                Pop_num(&amp;num,&amp;b);<br>                <span class="hljs-comment">// 计算 b + a</span><br>                c = b + a;<br>                Push_num(&amp;num,c); <span class="hljs-comment">// 计算结果入栈</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                Pop_num(&amp;num,&amp;a);<br>                Pop_num(&amp;num,&amp;b);<br>                <span class="hljs-comment">// 计算 b - a</span><br>                c = b - a;<br>                Push_num(&amp;num,c); <span class="hljs-comment">// 计算结果入栈</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                Pop_num(&amp;num,&amp;a);<br>                Pop_num(&amp;num,&amp;b);<br>                <span class="hljs-comment">// 计算 b * a</span><br>                c = b * a;<br>                Push_num(&amp;num,c); <span class="hljs-comment">// 计算结果入栈</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                Pop_num(&amp;num,&amp;a);<br>                Pop_num(&amp;num,&amp;b);<br>                <span class="hljs-comment">// 计算 b / a</span><br>                <span class="hljs-keyword">if</span>(a != <span class="hljs-number">0</span>)&#123;<br>                    c = b / a;<br>                    Push_num(&amp;num,c); <span class="hljs-comment">// 计算结果入栈</span><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;除0错误&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:<br>                Pop_num(&amp;num,&amp;a);<br>                Pop_num(&amp;num,&amp;b);<br>                <span class="hljs-comment">// 计算b^a</span><br>                c = <span class="hljs-built_in">pow</span>(b,a);<br>                Push_num(&amp;num,c); <span class="hljs-comment">// 计算结果入栈</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:<br>                Pop_num(&amp;num,&amp;a);<br>                c = <span class="hljs-number">1</span>;<br>                i = a;<br>                <span class="hljs-keyword">while</span>(i!=<span class="hljs-number">0</span>)&#123;<br>                    c*=i;<br>                    i--;<br>                &#125;<br>                Push_num(&amp;num,c); <span class="hljs-comment">// 计算结果入栈</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27; &#x27;</span>: <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-comment">// 出现的是数字    12 2</span><br>                d = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(*postexp&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;*postexp&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                    d = <span class="hljs-number">10</span> * d + (*postexp - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//12</span><br>                    postexp++;<br>                &#125;<br>                Push_num(&amp;num,d);<br>        &#125; <span class="hljs-comment">// switch 结束</span><br>        postexp++;<br>    &#125; <span class="hljs-comment">// while结束</span><br><br>    Pop_num(&amp;num,&amp;result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> *postexp = <span class="hljs-string">&quot;3 ! 16 1 * 1 5 - 2 ^ / +&quot;</span>;<br>    <span class="hljs-keyword">double</span> value = computer(postexp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,value);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6中缀表达式转换后缀表达式"><a href="#7-6中缀表达式转换后缀表达式" class="headerlink" title="7.6中缀表达式转换后缀表达式"></a>7.6中缀表达式转换后缀表达式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">迪杰斯特拉：调用场算法，可以实现中缀表达式转换为后缀表达式。<br>空栈：Optr<br>空数组：postexp。字符串<br>经过场算法的计算，postexp数组中保存的就是后缀表达式。<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">调用场算法的过程：从左到右扫描中缀表达式<br><span class="hljs-number">1</span>.如果遇到了&#x27;0&#x27;<span class="hljs-symbol">~&#x27;9&#x27;的字符，将其添加到数组的末尾</span>;<br><span class="hljs-number">2</span>.如果遇到的字符是除了&#x27;(&#x27;,&#x27;)&#x27;以外的运算符，将这个运算符和Optr栈中的栈顶的运算符进行优先级的大小比较，如果该运算符大于找顶运算符，就把该运算符入栈；反之，如果该运算符的优先级小于栈顶，就把栈顶运算符出栈，添加到添加到数组的末尾;然后继续拿当前的运算符和新的栈顶运算符进行比较。以此类推。<br><span class="hljs-number">3</span>.如果遇到的字符是&#x27;(&#x27;，直接入栈，如果遇到的是&#x27;)&#x27;,依次取 Optr 栈顶运算符，将他们添加到数组的末尾，直到遇到 &#x27;(&#x27;为止。注意：&#x27;(&#x27;也要出栈，不添加在数组中<br><br>当表达式扫描完毕，如果栈中还有运算符，那么依次将他们出栈，添加到数组的末尾。<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210826154817730.png" alt="image-20210826154817730"></p><p><strong>案例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> *str= <span class="hljs-string">&quot;3!+4*2/(1-5)^2&quot;</span>;<br><br><br>Optr:<br>+ / ( -<br>__________________________<br>postexp:<span class="hljs-number">3</span> ! <span class="hljs-number">4</span> <span class="hljs-number">2</span> * <span class="hljs-number">1</span> <span class="hljs-number">5</span> <br>    <br>! &gt; +<br>+ &lt; *<br>* &gt; /    <br>+ &lt; /<br>( &lt; -<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 100</span><br><br><span class="hljs-keyword">typedef</span> struct&#123;<br>    <span class="hljs-keyword">char</span> data[MAXSIZE]; <span class="hljs-comment">// 数组栈的数组</span><br>    <span class="hljs-keyword">int</span> top; <span class="hljs-comment">// 栈顶元素的下标</span><br>&#125;Stack;<br><br><span class="hljs-comment">// 初始化一个栈</span><br><span class="hljs-keyword">void</span> InitStack(Stack **S)&#123;<br>    *S = (Stack *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Stack));<br>    (*S)-&gt;top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-keyword">bool</span> Push(Stack **S,<span class="hljs-keyword">char</span> e)&#123;<br>    <span class="hljs-comment">// 栈满的时候不能入栈</span><br>    <span class="hljs-keyword">if</span>((*S)-&gt;top == MAXSIZE<span class="hljs-number">-1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    (*S)-&gt;data[++(*S)-&gt;top] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-keyword">bool</span> Pop(Stack **S,<span class="hljs-keyword">char</span> *e)&#123;<br>    <span class="hljs-keyword">if</span>((*S)-&gt;top == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *e = (*S)-&gt;data[(*S)-&gt;top];<br>    (*S)-&gt;top--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 得到栈顶元素</span><br><span class="hljs-keyword">bool</span> GetTop(Stack **S,<span class="hljs-keyword">char</span> *e)&#123;<br>    <span class="hljs-keyword">if</span>((*S)-&gt;top==<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    *e = (*S)-&gt;data[(*S)-&gt;top];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-keyword">bool</span> StackEmpty(Stack **S)&#123;<br>    <span class="hljs-keyword">if</span>((*S)-&gt;top==<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 将中缀转换为后缀</span><br><span class="hljs-comment">// exp:中缀表达式</span><br><span class="hljs-comment">// postexp : 后缀表达式</span><br><span class="hljs-keyword">void</span> trans(<span class="hljs-keyword">char</span> *<span class="hljs-built_in">exp</span>,<span class="hljs-keyword">char</span> postexp[])&#123;<br>    Stack *Optr;<br>    InitStack(&amp;Optr);<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> e;<br>    <span class="hljs-comment">// 从左到右依次扫描中缀表达式</span><br>    <span class="hljs-keyword">while</span>(*<span class="hljs-built_in">exp</span> != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-keyword">switch</span>(*<span class="hljs-built_in">exp</span>)&#123;<br>            <span class="hljs-comment">// 如果遇到了 &#x27;(&#x27;,直接入栈</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                Push(&amp;Optr,<span class="hljs-string">&#x27;(&#x27;</span>);<br>                <span class="hljs-built_in">exp</span>++;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 如果遇到了 &#x27;)&#x27;,一直进行出栈操作，直到 &#x27;(&#x27; 也出栈了</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>                Pop(&amp;Optr,&amp;e);<br>                <span class="hljs-keyword">while</span>(e != <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                    postexp[i++] = e;<br>                    Pop(&amp;Optr,&amp;e);<br>                &#125;<br>                <span class="hljs-built_in">exp</span>++;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// + - 的优先级情况完全相同，当作一种情况来处理。</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                <span class="hljs-comment">// 由于 + - 的优先级只比 （ 大，所以只要栈顶不是（，就一直出栈，反之，+ - 入栈</span><br>                <span class="hljs-keyword">while</span>(!StackEmpty(&amp;Optr))&#123;<br>                    GetTop(&amp;Optr,&amp;e);<br>                    <span class="hljs-keyword">if</span>(e == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        postexp[i++] = e;<br>                        Pop(&amp;Optr,&amp;e);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 最后 + - 入栈</span><br>                Push(&amp;Optr,*<span class="hljs-built_in">exp</span>);<br>                <span class="hljs-built_in">exp</span>++;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                <span class="hljs-comment">// 由于 * /   的优先级只比 * / ^ ! 小，所以只要栈顶是他们，就一直出栈，反之，* / 入栈</span><br>                <span class="hljs-keyword">while</span>(!StackEmpty(&amp;Optr))&#123;<br>                    GetTop(&amp;Optr,&amp;e);<br>                    <span class="hljs-keyword">if</span>(e == <span class="hljs-string">&#x27;/&#x27;</span> ||e == <span class="hljs-string">&#x27;*&#x27;</span> ||e == <span class="hljs-string">&#x27;^&#x27;</span> ||e == <span class="hljs-string">&#x27;!&#x27;</span> )&#123;<br>                        postexp[i++] = e;<br>                        Pop(&amp;Optr,&amp;e);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 最后 * / 入栈</span><br>                Push(&amp;Optr,*<span class="hljs-built_in">exp</span>);<br>                <span class="hljs-built_in">exp</span>++;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;^&#x27;</span>:<br>                <span class="hljs-comment">// 由于 ^   的优先级只比  ^ ! 小，所以只要栈顶是他们，就一直出栈，反之，^入栈</span><br>                <span class="hljs-keyword">while</span>(!StackEmpty(&amp;Optr))&#123;<br>                    GetTop(&amp;Optr,&amp;e);<br>                    <span class="hljs-keyword">if</span>(e == <span class="hljs-string">&#x27;^&#x27;</span> ||e == <span class="hljs-string">&#x27;!&#x27;</span> )&#123;<br>                        postexp[i++] = e;<br>                        Pop(&amp;Optr,&amp;e);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 最后 ^ 入栈</span><br>                Push(&amp;Optr,*<span class="hljs-built_in">exp</span>);<br>                <span class="hljs-built_in">exp</span>++;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:<br>                <span class="hljs-comment">// 由于 !   的优先级只比 ! 小，所以只要栈顶是!，就出栈，反之，当前的!入栈</span><br>                <span class="hljs-keyword">while</span>(!StackEmpty(&amp;Optr))&#123;<br>                    GetTop(&amp;Optr,&amp;e);<br>                    <span class="hljs-keyword">if</span>(e == <span class="hljs-string">&#x27;!&#x27;</span> )&#123;<br>                        postexp[i++] = e;<br>                        Pop(&amp;Optr,&amp;e);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 最后 ! 入栈</span><br>                Push(&amp;Optr,*<span class="hljs-built_in">exp</span>);<br>                <span class="hljs-built_in">exp</span>++;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                <span class="hljs-keyword">while</span>(*<span class="hljs-built_in">exp</span>&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;*<span class="hljs-built_in">exp</span>&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                    postexp[i++] = *<span class="hljs-built_in">exp</span>;<br>                    <span class="hljs-built_in">exp</span>++;<br>                &#125;<br><br>                postexp[i++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><br><br>        &#125;  <span class="hljs-comment">// switch 结束</span><br><br>    &#125;<span class="hljs-comment">// while 结束</span><br><br>    <span class="hljs-keyword">while</span>(!StackEmpty(&amp;Optr))&#123;<br>        Pop(&amp;Optr,&amp;e);<br>        postexp[i++] = e;<br>    &#125;<br>    postexp[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">free</span>(Optr);<br>&#125;<br><br><span class="hljs-keyword">int</span> main()&#123;<br>    <span class="hljs-keyword">char</span> *<span class="hljs-built_in">exp</span> = <span class="hljs-string">&quot;3!+4*2/(1-5)^2&quot;</span>;<br>    <span class="hljs-keyword">char</span> postexp[MAXSIZE];<br>    trans(<span class="hljs-built_in">exp</span>,postexp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,postexp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-队列"><a href="#8-队列" class="headerlink" title="8.队列"></a>8.队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">线性表，操作受限制。<br>插入和删除在不同端，允许删除的一端成为队头或者队首。允许添加的那端就是队尾。<br>先进的先出，后进的后出。    <br>也可以通过链表或者数组来实现。<br></code></pre></td></tr></table></figure><p>队列的数组实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">需要两个变量，front,rear。一个代表队首，永远指向队首，一个代表队尾，永远指向队尾。<br> 出队：front++<br> 入队：rear++   <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-built_in">queue</span>[<span class="hljs-number">110</span>];<br>    <span class="hljs-keyword">int</span> front;<br>    <span class="hljs-keyword">int</span> rear;<br>&#125;Queue;<br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue *q)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;front ==q-&gt;rear)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//判断队列是否已经满了</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">full</span><span class="hljs-params">(Queue *q)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> f=(q-&gt;front<span class="hljs-number">-1</span>)&gt;=<span class="hljs-number">0</span>?(q-&gt;front<span class="hljs-number">-1</span>):<span class="hljs-number">110</span>;<br>    <span class="hljs-keyword">if</span>(f==q-&gt;rear)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Queue *q,<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(full(q)==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已经满了&quot;</span>)；<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        q-&gt;<span class="hljs-built_in">queue</span>[q-&gt;rear++]=data;<br>        <span class="hljs-keyword">if</span>(rear==<span class="hljs-number">109</span>)&#123;<br>            rear=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//出队</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(Queue *q)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(IsEmpty(q)=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已经空了&quot;</span>)；<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">int</span> data=q-&gt;<span class="hljs-built_in">queue</span>[q-&gt;front];<br>        q-&gt;front++;<br>        <span class="hljs-keyword">if</span>(front==<span class="hljs-number">109</span>)&#123;<br>            front=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第六章：串"><a href="#第六章：串" class="headerlink" title="第六章：串"></a>第六章：串</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string<br>串：由<span class="hljs-number">0</span>个或者多个字符组成的有限的序列（字符串）。<br><span class="hljs-attribute">S</span>=<span class="hljs-string">&quot;a1a2a3........an&quot;</span><span class="hljs-comment">;(n&gt;=0);</span><br>S为字符串的名称。用<span class="hljs-string">&quot;&quot;</span>引起来的叫做串的值。<br><br>空串：<span class="hljs-string">&quot;&quot;</span>：没有长度；<br>空格串：“ ”：有长度的<br><br>串中的任意的个数的连续的字符组成的子序列，称为串的子串。包含子串的串称为主串。<br>模式匹配：在主串中找到字串的位置。<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">1.字符串的比较<br>2.串的抽象数据类型<br>3.串的存储结构<br><br>模式匹配算法<br>1.朴素的模式匹配<br>2.KMP模式匹配<br>3.KMPVAL模式匹配<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.字符串的比较<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// next数组的实现</span><br><br><span class="hljs-comment">// 通过计算返回模式串的 next 数组</span><br><span class="hljs-comment">// ababaaaba</span><br><span class="hljs-comment">// 0  1 1 2</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(String T,<span class="hljs-keyword">int</span> *next)</span></span>&#123;<br>  <span class="hljs-keyword">int</span> j,k; <span class="hljs-comment">//  j T串的下标，k 代表当前位置的 next值</span><br>  j = <span class="hljs-number">1</span>;<br>  k = <span class="hljs-number">0</span>;<br>  next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// next数组椰树从下标为1处开始</span><br>  <span class="hljs-keyword">while</span>(j&lt;T[<span class="hljs-number">0</span>])&#123; <br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> || T[j] == T[k])&#123;<br>      j++; <span class="hljs-comment">// 4</span><br>      k++; <span class="hljs-comment">// 2</span><br>      next[j] = k;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      k = next[k]; <span class="hljs-comment">// 若字符串不同，k进行回溯</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第七章：树"><a href="#第七章：树" class="headerlink" title="第七章：树"></a>第七章：树</h2><h3 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1.树的定义"></a>1.树的定义</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">树：<span class="hljs-built_in">n</span>个结点的有序集合。<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/myblog/2021/08/02/SpringMVC/"/>
    <url>/myblog/2021/08/02/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>SpringMVC：是基于spring的一个框架， 实际上就是spring的一个模块， 专门是做web开发的。<br>           理解是servlet的一个升级</p><pre><code>   web开发底层是servlet ， 框架是在servlet基础上面加入一些功能，让你做web开发方便。</code></pre><p>SpringMVC就是一个Spring。 Spring是容器，ioc能够管理对象，使用<bean>, @Component, @Repository, @Service, @Controller<br>  SpringMVC能够创建对象， 放入到容器中（SpringMVC容器）， springmvc容器中放的是控制器对象，</p><p>  我们要做的是 使用@Contorller创建控制器对象， 把对象放入到springmvc容器中， 把创建的对象作为控制器使用<br>  这个控制器对象能接收用户的请求， 显示处理结果，就当做是一个servlet使用。</p><p>  使用@Controller注解创建的是一个普通类的对象， 不是Servlet。 springmvc赋予了控制器对象一些额外的功能。</p><p>  web开发底层是servlet， springmvc中有一个对象是Servlet ： DispatherServlet(中央调度器)<br>  DispatherServlet: 负责接收用户的所有请求， 用户把请求给了DispatherServlet， 之后DispatherServlet把请求转发给<br>                    我们的Controller对象， 最后是Controller对象处理请求。</p><p>​           </p><p>  index.jsp—–DispatherServlet(Servlet)—-转发，分配给—Controller对象（@Controller注解创建的对象）<br>  main.jsp                                                   MainController<br>  addUser.jsp                                                UserController</p><hr><p>springmvc请求的处理流程</p><p> 1）发起some.do<br> 2）tomcat(web.xml–url-pattern知道 *.do的请求给DispatcherServlet)<br> 3）DispatcherServlet（根据springmvc.xml配置知道 some.do—doSome()）<br> 4）DispatcherServlet把some.do转发个MyController.doSome()方法<br> 5）框架执行doSome（）把得到ModelAndView进行处理， 转发到show.jsp</p><p>上面的过程简化的方式<br>  some.do—DispatcherServlet—MyController</p><hr><p>springmvc执行过程源代码分析</p><ol><li>tomcat启动，创建容器的过程<br>通过load-on-start标签指定的1，创建DisaptcherServlet对象，<br>DisaptcherServlet它的父类是继承HttpServlet的， 它是一个serlvet， 在被创建时，会执行init（）方法。<br>在init（）方法中<br>//创建容器，读取配置文件<br> WebApplicationContext ctx = new ClassPathXmlApplicationContext(“springmvc.xml”);<br> //把容器对象放入到ServletContext中<br> getServletContext().setAttribute(key, ctx);</li></ol><p>  上面创建容器作用： 创建@controller注解所在的类的对象， 创建MyController对象，<br>   这个对象放入到 springmvc的容器中， 容器是map ， 类似 map.put(“myController”,MyController对象)</p><p>2.请求的处理过程<br>  1）执行servlet的service()<br>       protected void service(HttpServletRequest request, HttpServletResponse response)</p><pre><code>   protected void doService(HttpServletRequest request, HttpServletResponse response)  DispatcherServlet.doDispatch(request, response)&#123;      调用MyController的.doSome()方法  &#125;</code></pre><p>   doDispatch：springmvc中DispatcherServlet的核心方法， 所有的请求都在这个方法中完成的。</p><p>没有加入注解驱动标签时的状态<br>org.springframework.http.converter.ByteArrayHttpMessageConverter<br>org.springframework.http.converter.StringHttpMessageConverter<br>org.springframework.http.converter.xml.SourceHttpMessageConverter<br>org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter</p><p>加入注解驱动标签时的状态<br>org.springframework.http.converter.ByteArrayHttpMessageConverter<br>org.springframework.http.converter.StringHttpMessageConverter<br>org.springframework.http.converter.ResourceHttpMessageConverter<br>org.springframework.http.converter.ResourceRegionHttpMessageConverter<br>org.springframework.http.converter.xml.SourceHttpMessageConverter<br>org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter<br>org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter<br>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</p><p>==========================================================================<br>发起的请求是由哪些服务器程序处理的。</p><p><a href="http://localhost:8080/ch05_url_pattern/index.jsp">http://localhost:8080/ch05_url_pattern/index.jsp</a> ：tomcat（jsp会转为servlet）<br><a href="http://localhost:8080/ch05_url_pattern/js/jquery-3.4.1.js">http://localhost:8080/ch05_url_pattern/js/jquery-3.4.1.js</a> ： tomcat<br><a href="http://localhost:8080/ch05_url_pattern/images/p1.jpg">http://localhost:8080/ch05_url_pattern/images/p1.jpg</a> ： tomcat<br><a href="http://localhost:8080/ch05_url_pattern/html/test.html%EF%BC%9A">http://localhost:8080/ch05_url_pattern/html/test.html：</a> tomcat<br><a href="http://localhost:8080/ch05_url_pattern/some.do">http://localhost:8080/ch05_url_pattern/some.do</a> ：  DispatcherServlet（springmvc框架处理的）</p><p>tomcat本身能处理静态资源的访问， 像html， 图片， js文件都是静态资源</p><p>tomcat的web.xml文件有一个servlet 名称是 default ， 在服务器启动时创建的。<br> <servlet><br>        <servlet-name>default</servlet-name><br>        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class><br>        <init-param><br>            <param-name>debug</param-name><br>            <param-value>0</param-value><br>        </init-param><br>        <init-param><br>            <param-name>listings</param-name><br>            <param-value>false</param-value><br>        </init-param><br>        <load-on-startup>1</load-on-startup><br>    </servlet></p><pre><code>  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  表示静态资源和未映射的请求都这个default处理&lt;/servlet-mapping&gt;</code></pre><p>default这个servlet作用：<br>The default servlet for all web applications, that serves static<br>resources.  It processes all requests that are not mapped to other<br>servlets with servlet mappings (defined either here or in your own<br>web.xml file).</p><p>1.处理静态资源<br>2.处理未映射到其它servlet的请求。</p><p>========================================================================<br>在jsp ， html中使用的地址， 都是在前端页面中的地址，都是相对地址</p><p>地址分类：<br> 1.绝对地址 ， 带有协议名称的是绝对地址，  <a href="http://www.baidu.com/">http://www.baidu.com</a> , <a href="ftp://202.122.23.1/">ftp://202.122.23.1</a><br> 2.相对地址， 没有协议开头的， 例如 user/some.do  , /user/some.do<br>              相对地址不能独立使用，必须有一个参考地址。 通过参考地址+相对地址本身才能指定资源。</p><pre><code>              张三同学， 1班有张三， 2班也有张三</code></pre><p> 3.参考地址<br>    1） 在你的页面中的，访问地址不加 “/“</p><pre><code> 访问的是： http://localhost:8080/ch06_path/index.jsp  路径： http://localhost:8080/ch06_path/    资源： index.jsp在index.jsp发起 user/some.do请求，访问地址变为 http://localhost:8080/ch06_path/user/some.do   当你的地址 没有斜杠开头,例如 user/some.do , 当你点击链接时， 访问地址是当前页面的地址    加上链接的地址。  http://localhost:8080/ch06_path/ + user/some.do -------------------------------------------------------------  index.jsp  访问 user/some.do  ， 返回后现在的地址： http://localhost:8080/ch06_path/user/some.do  http://localhost:8080/ch06_path/user/some.do  路径：      http://localhost:8080/ch06_path/user/  资源：   some.do  在index.jsp在 user/some.do ，就变为 http://localhost:8080/ch06_path/user/user/some.do  解决方案：   1.加入$&#123;pageContext.request.contextPath&#125;    2.加入一个base标签， 是html语言中的标签。 表示当前页面中访问地址的基地址。      你的页面中所有 没有“/”开头的地址，都是以base标签中的地址为参考地址    使用base中的地址 + user/some.do 组成访问地址</code></pre><p>   2）在你的页面中的，访问地址加 “/“<br>      访问的是： <a href="http://localhost:8080/ch06_path/index.jsp">http://localhost:8080/ch06_path/index.jsp</a><br>      路径： <a href="http://localhost:8080/ch06_path/">http://localhost:8080/ch06_path/</a><br>        资源： index.jsp</p><pre><code>    点击 /user/some.do, 访问地址变为 http://localhost:8080/user/some.do    参考地址是 你的服务器地址， 也就是 http://localhost:8080    如果你的资源不能访问： 加入$&#123;pageContext.request.contextPath&#125;    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/some.do&quot;&gt;发起user/some.do的get请求&lt;/a&gt;</code></pre><p>​    </p><p>index.jsp–addStudent.jsp—student/addStudent.do( service的方法，调用dao的方法)–result.jsp</p><p>=======================================================================================================</p><p>ch08-forard-redirect:转发和重定向</p><p>forward：表示转发<br>redirect：表示重定向<br>forward和redirect都是关键字， 有一个共同的特点不和视图解析器一同工作</p><p>扩展：<br>forward和redirect他们都可以访问 视图文件，比如某个jsp ，html<br> forward:/hello.jsp  forward:/main.html</p><p>forward和redirect他们都可以访问其它的controller<br> forward:/some.do , redirect:/other.do</p><p>处理器方法可以返回ModelAndView, String , void 都可以使用forward，redirect</p><p>============================================================================================<br>异常处理：<br>springmvc框架采用的是统一，全局的异常处理。<br>把controller中的所有异常处理都集中到一个地方。 采用的是aop的思想。把业务逻辑和异常处理代码分开。解耦合。</p><p>使用两个注解<br>1.@ExceptionHandler<br>2.@ControllerAdvice</p><p>拦截器：<br>1）拦截器是springmvc中的一种，需要实现HandlerInterceptor接口。<br>2）拦截器和过滤器类似，功能方向侧重点不同。 过滤器是用来过滤器请求参数，设置编码字符集等工作。<br>    拦截器是拦截用户的请求，做请求做判断处理的。<br>3）拦截器是全局的，可以对多个Controller做拦截。<br>   一个项目中可以有0个或多个拦截器， 他们在一起拦截用户的请求。<br>    拦截器常用在：用户登录处理，权限检查， 记录日志。</p><p>拦截器的使用步骤：<br> 1.定义类实现HandlerInterceptor接口<br> 2.在springmvc配置文件中，声明拦截器， 让框架知道拦截器的存在。</p><p>拦截器的执行时间：<br>  1）在请求处理之前， 也就是controller类中的方法执行之前先被拦截。<br>  2）在控制器方法执行之后也会执行拦截器。<br>  3）在请求处理完成后也会执行拦截器。</p><p>拦截器：看做是多个Controller中公用的功能，集中到拦截器统一处理。使用的aop的思想</p><p>=================================================================================<br>多个拦截器：<br>第一个拦截器preHandle=true , 第二个拦截器preHandle=true </p><p>111111-拦截器的MyInterceptor的preHandle()<br>22222-拦截器的MyInterceptor的preHandle()<br>=====执行MyController中的doSome方法=====<br>22222-拦截器的MyInterceptor的postHandle()<br>111111-拦截器的MyInterceptor的postHandle()<br>22222-拦截器的MyInterceptor的afterCompletion()<br>111111-拦截器的MyInterceptor的afterCompletion()</p><hr><p>第一个拦截器preHandle=true , 第二个拦截器preHandle=false</p><p>111111-拦截器的MyInterceptor的preHandle()<br>22222-拦截器的MyInterceptor的preHandle()<br>111111-拦截器的MyInterceptor的afterCompletion()</p><hr><p>第一个拦截器preHandle=false , 第二个拦截器preHandle=true|false</p><p>111111-拦截器的MyInterceptor的preHandle()</p><p>====================================================================<br>拦截器和过滤器的区别</p><p>1.过滤器是servlet中的对象，  拦截器是框架中的对象<br>2.过滤器实现Filter接口的对象， 拦截器是实现HandlerInterceptor<br>3.过滤器是用来设置request，response的参数，属性的，侧重对数据过滤的。<br>  拦截器是用来验证请求的，能截断请求。<br>4.过滤器是在拦截器之前先执行的。<br>5.过滤器是tomcat服务器创建的对象<br>  拦截器是springmvc容器中创建的对象<br>6.过滤器是一个执行时间点。<br>  拦截器有三个执行时间点<br>7.过滤器可以处理jsp，js，html等等<br>  拦截器是侧重拦截对Controller的对象。 如果你的请求不能被DispatcherServlet接收， 这个请求不会执行拦截器内容<br>8.拦截器拦截普通类方法执行，过滤器过滤servlet请求响应</p><p>===========================================================================</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis框架</title>
    <link href="/myblog/2021/07/23/MyBatis%E6%A1%86%E6%9E%B6/"/>
    <url>/myblog/2021/07/23/MyBatis%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="1、概述："><a href="#1、概述：" class="headerlink" title="1、概述："></a>1、概述：</h2><p>传统JDBC操作数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、注册驱动</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>String url=<span class="hljs-string">&quot;dbc:mysql://localhost:3306/test ?serverTimezone=UTC&quot;</span>;<br><span class="hljs-comment">//2.获取连接对象</span><br>Connection connection=DriverManagement.getConnection(url,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-comment">//定义sql</span><br>String sql=<span class="hljs-string">&quot;select *from student&quot;</span>;<br><span class="hljs-comment">//获取执行</span><br>Statement statement=connnect.creatStatement();<br>ResultSet resultSet=statement.executeQuery(sql);<br>resultSet.next();<br>String name=result.getString(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-keyword">int</span> age=result.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>`<br></code></pre></td></tr></table></figure><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><p>1.创建Maven工程，导入依赖坐标。</p><p>2.创建实体类    属性名和列名相同    实现Serializable接口</p><p>3.dao层接口</p><p>4.创建MyBatis主配置文件：SQL Map Config.xml</p><p>​    MySql环境</p><p>​    事务类型</p><p>​    连接池</p><p>​        driver,url,uname,pwd</p><p>5.创建映射配置文件：userDao.xml</p><p>​    1.对接口中的方法实现</p><p><strong>注意事项：</strong></p><p>1.命名问题</p><p>2.创建Directory和package的区别</p><p>​    directory：一级一级创建</p><p>​    Package：一次性创建多级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        InputStream inputStream= Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConFig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂对象</span><br>        SqlSessionFactoryBuilder builder=<span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        SqlSessionFactory sqlSessionFactory= builder.build(inputStream);<br>        <span class="hljs-comment">//3.使用工厂生成SqlSession对象</span><br>        SqlSession sqlSession=sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao层的代理对象</span><br>        UserDao mapper=sqlSession.getMapper(UserDao.class);<br>        <span class="hljs-comment">//5.使用代理对象执行方法</span><br>        List&lt;User&gt; userList=mapper.findAll();<br>        <span class="hljs-keyword">for</span> (User user:userList) &#123;<br>            System.out.println(user);<br>        &#125;<br>        <span class="hljs-comment">//6.释放资源</span><br>        sqlSession.close();<br>        inputStream.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="新建module，搭建MyBatis环境"><a href="#新建module，搭建MyBatis环境" class="headerlink" title="新建module，搭建MyBatis环境"></a>新建module，搭建MyBatis环境</h3><p>环境搭建：</p><p>1.导入依赖    ：pom.xml</p><p>2.复制lo4j.properties</p><p>3.配置MyBatis主配置文件：SqlMapConfig.xml</p><p>4.准备实体类</p><p>​    1.属性名和数据库表中的字段名保持一致</p><p>5.准备dao层</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xml</title>
    <link href="/myblog/2021/07/16/XML%E7%AC%94%E8%AE%B0/"/>
    <url>/myblog/2021/07/16/XML%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>xml：Extendsible Markup Language 可扩展标记语言</p><h4 id="1、可扩展"><a href="#1、可扩展" class="headerlink" title="1、可扩展"></a>1、可扩展</h4><h4 id="2、多功能"><a href="#2、多功能" class="headerlink" title="2、多功能"></a>2、多功能</h4><p>1、配置文件</p><p>2、在网络中传输</p><h4 id="3、与xml的区别"><a href="#3、与xml的区别" class="headerlink" title="3、与xml的区别"></a>3、与xml的区别</h4><p>1、XML标签是自定义的，HTML标签是预定义的。</p><p>2、XML的语法严格，HTML语法松散</p><p>3、XML是存储数据的，HTML是展示数据</p><h2 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h2><h4 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h4><p>   1、XML文档的后缀：.xml</p><ol start="2"><li>XML文档的第一行必须是文档声明： <?xml version='1.0'?></li><li>XML文档中有且仅有一个根标签</li><li>属性值必须使用引号（单双引号均可）引起来</li><li>标签必须正确关闭</li><li>XML标签区分大小写</li></ol><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&#x27;1.0&#x27;</span>?&gt;<br>                  &lt;users&gt;<br>                      &lt;user id=<span class="hljs-string">&#x27;1&#x27;</span>&gt;<br>                          &lt;name&gt;比尔盖茨&lt;/name&gt;<br>                          &lt;age&gt;<span class="hljs-number">67</span>&lt;/age&gt;<br>                          &lt;gender&gt;male&lt;/gender&gt;<br>                      &lt;/user&gt;<br><br>                      &lt;user id=<span class="hljs-string">&#x27;2&#x27;</span>&gt;<br>                          &lt;name&gt;乔布斯&lt;/name&gt;<br>                          &lt;age&gt;<span class="hljs-number">64</span>&lt;/age&gt;<br>                          &lt;gender&gt;male&lt;/gender&gt;<br>                      &lt;/user&gt;<br>                  &lt;/users&gt;<br><br></code></pre></td></tr></table></figure><h4 id="2、组成"><a href="#2、组成" class="headerlink" title="2、组成"></a>2、组成</h4><h5 id="1、文档声明"><a href="#1、文档声明" class="headerlink" title="1、文档声明"></a>1、文档声明</h5><p>​    格式：&lt;？xml 属性列表 ？&gt;</p><p>​    属性列表：version:版本号</p><p>​                        encoding:编译格式，告知解析引擎当前文件使用的编码格式，默认：ISO-8859-1</p><p>​                        standalone:是否独立</p><p>​                                yes</p><pre><code>                           no</code></pre><p>​        </p><h5 id="2、指令"><a href="#2、指令" class="headerlink" title="2、指令"></a>2、指令</h5><p>与css结合控制xml样式，现在已经不用了</p><h5 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h5><p>​    规则：</p><p>​    1、名称可以包含字母、数字、其他符号</p><p>​    2、名称不能以数字或者标点符号开始</p><p>​    3、名称不能以 字母组合xml（任何大小写组合都不行，XML，Xml等）开始</p><p>​    4、名称不能包含空格</p><h5 id="4、属性"><a href="#4、属性" class="headerlink" title="4、属性"></a>4、属性</h5><p>规则：<br>          1. 以键值对的形式存在<br>                      2. 属性必须用引号引起来<br>                      3. id属性值必须唯一</p><h5 id="5、文本"><a href="#5、文本" class="headerlink" title="5、文本"></a>5、文本</h5><p>注意：</p><pre><code>     1. 文本中 包含  &lt; , &gt; , &amp; 必须使用转译字符： &lt;  =  &amp;lt;  ,  &amp; = &amp;amp;  ,  &gt;  =  &amp;gt;     2. CDATA区：该区域中的数据会被原样输出，不必使用转译字符                              格式：  &lt;![CDATA[内容]]&gt;                                 &lt;![CDATA[ if(a&gt;b &amp;&amp; a&lt;100) ]]&gt;</code></pre><h2 id="3、约束"><a href="#3、约束" class="headerlink" title="3、约束"></a>3、约束</h2><p>3.1 概述：</p><pre><code>            规定xml文档的书写规范               2. 学习要求：                 能够在xml中引入约束文档                     能够大致读懂约束文档</code></pre><p>3.3约束图解</p><p><img src="C:\Users\Lenovo\Pictures\QQ截图20210712203940.png"></p><ol start="4"><li><p>分类</p><pre><code>                  DTD：简单的约束 技术                  Schema:复杂的约束技术         3.2 DTD              引入：                   内部DTD:将约束规则定义在XML文档中（写完外部再写内部即可）</code></pre></li></ol><pre><code>                   &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;                   &lt;!--&lt;!DOCTYPE students SYSTEM &quot;\dtd\Student.dtd&quot;&gt;--&gt;                   &lt;!DOCTYPE students [                           &lt;!--students 标签，它内部可以包含0-n个 student标签--&gt;                           &lt;!ELEMENT students (student*)&gt;                           &lt;!--student 标签，它内部包含name,age,sex三个标签,顺序必须按照规定顺序，并且只能出现一次--&gt;                           &lt;!ELEMENT student (name,age,sex)&gt;                           &lt;!--name 标签 #pcdata代表 String类型--&gt;                           &lt;!ELEMENT name (#PCDATA)&gt;                           &lt;!ELEMENT age (#PCDATA)&gt;                           &lt;!ELEMENT sex (#PCDATA)&gt;                           &lt;!--定义属性：student标签中  number:属性名   ID：唯一  #required:必须的--&gt;                           &lt;!ATTLIST student number ID #REQUIRED&gt;                           ]&gt;                   &lt;students&gt;                       &lt;student number=&quot;s001&quot;&gt;                           &lt;name&gt;刘德华&lt;/name&gt;                           &lt;age&gt;25&lt;/age&gt;                           &lt;sex&gt;男&lt;/sex&gt;                       &lt;/student&gt;                   &lt;/students&gt;                     外部DTD：将约束的规则定义在外部DTD中                          本地： &lt;!DOCTYPE 根标签名 SYSTEM &quot;DTD文件位置&quot;&gt;                          网络: &lt;!DOCTYPE 跟标签名 PUBLIC &quot;DTD文件名&quot; &quot;DTD文件位置（URL）&quot;                 先写DTD约束                   &lt;!--students 标签，它内部可以包含0-n个 student标签--&gt;                   &lt;!ELEMENT students (student*)&gt;                   &lt;!--student 标签，它内部包含name,age,sex三个标签,顺序必须按照规定顺序，并且只能出现一 次--&gt;                   &lt;!ELEMENT student (name,age,sex)&gt;                   &lt;!--name 标签 #pcdata代表 String类型--&gt;                   &lt;!ELEMENT name (#PCDATA)&gt;                   &lt;!ELEMENT age (#PCDATA)&gt;                   &lt;!ELEMENT sex (#PCDATA)&gt;                   &lt;!--定义属性：student标签中  number:属性名   ID：唯一  #required:必须的--&gt;                   &lt;!ATTLIST student number ID #REQUIRED&gt;                 再写XML，并引入DTD                   &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;                   &lt;!DOCTYPE students SYSTEM &quot;\dtd\Student.dtd&quot;&gt;                   &lt;students&gt;                       &lt;student number=&quot;s001&quot;&gt;                           &lt;name&gt;刘德华&lt;/name&gt;                           &lt;age&gt;25&lt;/age&gt;                           &lt;sex&gt;男&lt;/sex&gt;                       &lt;/student&gt;                   &lt;/students&gt;                     通过上述案例，我们不难发现DTD的弊端：无法对属性内容进行限定。比如我们无法去限定                 age必须在0~100之间。            3.3 Schema            Schema文档要求能够读懂，可以做简单修改即可。            Student.xsd              &lt;?xml version=&quot;1.0&quot;?&gt;              &lt;xsd:schema xmlns=&quot;http://www.wdzl.cn/xml&quot;                      xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;                      targetNamespace=&quot;http://www.wdzl.cn/xml&quot; elementFormDefault=&quot;qualified&quot;&gt;                  &lt;xsd:element name=&quot;students&quot; type=&quot;studentsType&quot;/&gt;                  &lt;xsd:complexType name=&quot;studentsType&quot;&gt;                      &lt;xsd:sequence&gt;                          &lt;xsd:element name=&quot;student&quot; type=&quot;studentType&quot; minOccurs=&quot;0&quot;              maxOccurs=&quot;unbounded&quot;/&gt;                      &lt;/xsd:sequence&gt;                  &lt;/xsd:complexType&gt;                  &lt;xsd:complexType name=&quot;studentType&quot;&gt;                      &lt;xsd:sequence&gt;                          &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;                          &lt;xsd:element name=&quot;age&quot; type=&quot;ageType&quot; /&gt;                          &lt;xsd:element name=&quot;sex&quot; type=&quot;sexType&quot; /&gt;                      &lt;/xsd:sequence&gt;                      &lt;xsd:attribute name=&quot;number&quot; type=&quot;numberType&quot; use=&quot;required&quot;/&gt;                  &lt;/xsd:complexType&gt;                  &lt;xsd:simpleType name=&quot;sexType&quot;&gt;                      &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;                          &lt;xsd:enumeration value=&quot;male&quot;/&gt;                          &lt;xsd:enumeration value=&quot;female&quot;/&gt;                      &lt;/xsd:restriction&gt;                  &lt;/xsd:simpleType&gt;                  &lt;xsd:simpleType name=&quot;ageType&quot;&gt;                      &lt;xsd:restriction base=&quot;xsd:integer&quot;&gt;                          &lt;xsd:minInclusive value=&quot;0&quot;/&gt;                          &lt;xsd:maxInclusive value=&quot;256&quot;/&gt;                      &lt;/xsd:restriction&gt;                  &lt;/xsd:simpleType&gt;                  &lt;xsd:simpleType name=&quot;numberType&quot;&gt;                      &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;                          &lt;xsd:pattern value=&quot;IT_\d&#123;3&#125;&quot;/&gt;                      &lt;/xsd:restriction&gt;                  &lt;/xsd:simpleType&gt;              &lt;/xsd:schema&gt;            头信息：            主体部分：            Student.xml              &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;              &lt;!--                   1. xml的根元素                   2.引入xsi前缀-固定格式：http://www.w3.org/2001/XMLSchema-instance                   3.引入xsd文件命名空间：xsi:schemaLocation=&quot;http://www.wdzl.cn/xml student.xsd                      *http://www.wdzl.cn/xml：命名空间                      *student.xsd：文件存储路径                   4.为每一个 xsd 约束 声明一个前缀，作为标识                      *因为一个xml中可能有多个约束文档，前缀的作用用于区分同名标签属于哪一个xsd的情况                      *声明格式：&lt;xmlns:标签名=“命名空间”&gt;                      *使用格式：&lt;a:name&gt;&lt;/a:name&gt;,不写使用默认空前缀              --&gt;              &lt;a:students xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;                        xsi:schemaLocation=&quot;http://www.wdzl.cn/xml student.xsd&quot;                        xmlns:a=&quot;http://www.wdzl.cn/xml&quot;&gt;              &lt;a:student number=&quot;wdzl_0001&quot;&gt;                  &lt;a:name&gt;周杰a:伦&lt;/a:name&gt;                  &lt;a:age&gt;18&lt;/a:age&gt;                  &lt;a:sex&gt;female&lt;/a:sex&gt;              &lt;/a:student&gt;                  &lt;a:student number=&quot;wdzl_0002&quot;&gt;                      &lt;a:name&gt;呵呵&lt;/name&gt;                      &lt;a:age&gt;17&lt;/age&gt;                      &lt;a:sex&gt;male&lt;/sex&gt;                  &lt;/a:student&gt;              &lt;a:/students&gt;</code></pre><h2 id="4、解析"><a href="#4、解析" class="headerlink" title="4、解析"></a>4、解析</h2><h5 id="4-1-常见XML操作"><a href="#4-1-常见XML操作" class="headerlink" title="4.1 常见XML操作"></a>4.1 常见XML操作</h5><pre><code>               1. 解析（读取）：将文档中的数据读取到内存中               2. 写入（持久化）：将内存中的数据保存到xml文档中。不常用            4.2 解析XML的方式               1. DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树                 优点：操作简单，可以对文档进行CRUD的所有操作                 缺点：占内存，不适用移动和嵌入式设备。               2. SAX：逐行读取，基于事件驱动的解析方式                 Sun公司在JDK5版本对DOM解析技术的升级，并命名为SAX（Simple API for XML）。SAX是逐行                 读取xml文件，不会创建大量的DOM对象，所以在内存使用和性能上，都优于DOM解析。                   3. 第三方的解析                     jdom：在dom基础上进行封装。                     dom4j：是在jdom上进行了在封装。                     pull 主要用在Android手机开发。它与SAX非常类似，都是事件驱动方式解析xml文件。            3. dom4j解析技术 - 重点            3.1 dom4j类库的使用            由于dom4j它不是sun公司的技术，而属于第三方公司的技术，需要我们配置依赖jar包。            3.2 dom4j解析案例            1. 准备xml解析用例              &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;              &lt;books&gt;                  &lt;book bid=&quot;BID123456&quot;&gt;                      &lt;name&gt;Java葵花宝典&lt;/name&gt;                      &lt;price&gt;20.50&lt;/price&gt;                      &lt;author&gt;詹姆斯高斯林&lt;/author&gt;                  &lt;/book&gt;                  &lt;book bid=&quot;BID223456&quot;&gt;                      &lt;name&gt;JavaSE入门宝典&lt;/name&gt;                      &lt;price&gt;29.90&lt;/price&gt;                      &lt;author&gt;比尔盖茨&lt;/author&gt;                  &lt;/book&gt;              &lt;/books&gt;            2. 准备对应的Book类              public class Book &#123;                  private String bid;                  private String name;                  private String price;                  private String author;                  public Book() &#123;                  &#125;                  public Book(String bid, String name, String price, String author) &#123;                      this.bid = bid;                      this.name = name;                      this.price = price;                      this.author = author;                  &#125;                  public String getBid() &#123;                      return bid;                  &#125;                  public void setBid(String bid) &#123;                      this.bid = bid;                  &#125;                  public String getName() &#123;                      return name;                  &#125;                  public void setName(String name) &#123;                      this.name = name;                  &#125;                  public String getPrice() &#123;                      return price;                  &#125;                  public void setPrice(String price) &#123;                      this.price = price;                  &#125;                  public String getAuthor() &#123;                      return author;                  &#125;                  public void setAuthor(String author) &#123;                      this.author = author;                  &#125;                  @Override                  public String toString() &#123;                      return &quot;Book&#123;&quot; +                              &quot;bid=&#39;&quot; + bid + &#39;\&#39;&#39; +                              &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; +                              &quot;, price=&quot; + price +                              &quot;, author=&#39;&quot; + author + &#39;\&#39;&#39; +                              &#39;&#125;&#39;;                  &#125;              &#125;            3. 新建jar包，并将jar添加到项目中            4.使用dom4j读取xml文件                  @Test                  public void test() throws DocumentException &#123;                      //创建一个SAXReader输入流，读取xml文件，生成Document对象                      SAXReader saxReader = new SAXReader();                      Document document = saxReader.read(&quot;xml\\book.xml&quot;);                      System.out.println(document);                  &#125;            结果：            5. 通过Document对象获取xml数据包装成实体类               //读取books.xml文件生成book类                  @Test                  public void test2() throws DocumentException &#123;                     //1.读取book.xml文件                      SAXReader saxReader = new SAXReader();                      Document document = saxReader.read(&quot;xml\\book.xml&quot;);                      //2.通过Document对象获取根元素                      Element rootElement = document.getRootElement();                      //3.通过跟元素获取book标签对象                      //element() 和 elements()都可以获取子元素，我们只需要根据子元素的多少选择用哪一个              即可                      List&lt;Element&gt; books = rootElement.elements(&quot;book&quot;);                      //4.遍历，处理每个标签转换为Book类                      for (Element book : books) &#123;                          //asXML():将标签对象，转换为标签对应的字符串                         // System.out.println(book.asXML());                          //单独拿出name标签                          Element nameElement = book.element(&quot;name&quot;);                          //System.out.println(nameElement.asXML());                          // getText() 获取标签中的文本内容                          String nameText = nameElement.getText();                          //System.out.println(nameText);                          // 直接获取指定标签名的文本内容                          String priceText = book.elementText(&quot;price&quot;);                          String authorText = book.elementText(&quot;author&quot;);                          //System.out.println(nameText+&quot;--&quot;+priceText+&quot;--&quot;+authorText);                          // 获取属性                          String bid = book.attributeValue(&quot;bid&quot;);              //            System.out.println(bid+&quot;--&quot;+nameText+&quot;--&quot;+priceText+&quot;--              &quot;+authorText);                          System.out.println(new Book(bid,nameText,priceText,authorText));                      &#125;                  &#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>maven</title>
    <link href="/myblog/2021/07/12/Maven/"/>
    <url>/myblog/2021/07/12/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Maven"><a href="#1、Maven" class="headerlink" title="1、Maven"></a>1、Maven</h1><h2 id="1-1什么是maven"><a href="#1-1什么是maven" class="headerlink" title="1.1什么是maven"></a>1.1什么是maven</h2><p>Maven的本质是项目管理工具，是跨平台的，最大化的消除了构建的重复，并未绝大多部分的构建任务提供了已经实现的插件。它帮助我们标准化构建过程，maven作为开放的框架，提供了公共的接口，方便同第三方插件继承，程序员可以将自己需要的插件，动态的继承到maven上，从而扩展新的功能。Maven统一了每个项目的构建过程，实现了不同项目的兼容性管理。</p><h2 id="1-2-构建"><a href="#1-2-构建" class="headerlink" title="1.2.构建"></a>1.2.构建</h2><p>​    构建是以我们编写的java代码，框架配置文件，静态资源等作为原材料，去生成一个可以运行的项目过程。</p><h2 id="1-3构建的主要环节"><a href="#1-3构建的主要环节" class="headerlink" title="1.3构建的主要环节"></a>1.3构建的主要环节</h2><p>①清理：清理删除之前项目的的编译结果，为本次项目编译做准备。</p><p>②编译：将Java源程序的代码编译为字节码文件。</p><p>③测试：针对项目中的一些重要的关键点进行测试，确保项目在开发过程中重要关键点无误。</p><p>④报告：每次测试后用标准格式记录和显示测试结果。</p><p>⑤打包：将一个包含许多文件的工程封装压缩为一个压缩文件，然后用于用于以后的安装或部署。Java工程打包之后对应的是jar包，Web工程打包之后对应的是war包。</p><p>⑥安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。</p><p>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。</p><h2 id="1-5核心概念"><a href="#1-5核心概念" class="headerlink" title="1.5核心概念"></a>1.5核心概念</h2><p>1.约定的目录结构</p><p>2.pom</p><p>3.坐标</p><p>4.依赖</p><p>5.仓库</p><p>6.生命周期。插件</p><p>7.继承</p><p>8.聚合</p><p><img src="C:\Users\Lenovo\Pictures\3F1C2D2D-E4B4-4f06-829D-9C8FA79D3531.png"></p><h2 id="1-6-第一个Maven项目"><a href="#1-6-第一个Maven项目" class="headerlink" title="1.6.第一个Maven项目"></a>1.6.第一个Maven项目</h2><h2 id="1-7-POM"><a href="#1-7-POM" class="headerlink" title="1.7.POM"></a>1.7.POM</h2><p>1.POM:Project Object Model项目对象模型</p><p>2.pom.xml:对于maven，它是核心配置文件，与构建过程中相关的配置文件，都在这个文件中进行</p><h2 id="1-8-坐标"><a href="#1-8-坐标" class="headerlink" title="1.8.坐标"></a>1.8.坐标</h2><p>1.数学：</p><p>​    平面：x,y</p><p>​    空间：x，y，z</p><p>2.maven</p><p>​        groupid:公司或组织的域名倒叙+项目名</p><p>​        artifactid：模块名</p><p>​        version：版本</p><h2 id="1-9-仓库"><a href="#1-9-仓库" class="headerlink" title="1.9.仓库"></a>1.9.仓库</h2><p>1.仓库分类</p><p>​        1.本地仓库：在本地电脑上部署的仓库</p><p>​        2.远程仓库：</p><p>​            1.私服：</p><p>​            2.中央仓库：架设在internet上，为全世界的maven项目提供服务</p><p>​            3.中央仓库镜像：分担中央仓库的访问压力</p><p>2.仓库中保存的内容</p><p>​        1.maven自身需要的插件</p><p>​        2.第三方架构或工具的jar包</p><p>​        3.我们自己开发的maven项目</p><h2 id="1-10依赖"><a href="#1-10依赖" class="headerlink" title="1.10依赖"></a>1.10依赖</h2><p> 1.compile: 编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的maven依赖，对于编译 测试 运行三种的classpath都有效。</p><p>  2.test：测试依赖范围。使用此依赖范围的Maven依赖，只对于测试的classpath有效，在编译主代码或者运行主代码的时候都无法依赖此类依赖。典型的例子是jUnit,它只有在编译测试代码及运行测试代码的时候才有效。</p><p>  3.provided:以提供依赖范围。使用此依赖范围的maven依赖，对于编译和测试classpath有效，但在运行时无效。典型的例子是servlet-api，编译和测试项目的时候需要该依赖，但在运行的时候，由于容器已经提供，就不需要maven重复地引入一遍。打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作</p><p>- compile依赖范围<br>  - 主程序：有效<br>  - 测试程序：有效<br>  - 打包：参与<br>  - 部署：参与<br>- test依赖范围<br>  - 主程序：无效<br>  - 测试程序：有效<br>  - 打包：不参与<br>- provided依赖范围<br>  - 主程序：有效<br>  - 测试程序：有效<br>  - 打包：不参与<br>  - 部署：不参与，原本的依赖由服务器提供</p><h2 id="1-11常见的依赖范围对比"><a href="#1-11常见的依赖范围对比" class="headerlink" title="1.11常见的依赖范围对比"></a>1.11常见的依赖范围对比</h2><p>compile</p><p>test</p><p>provided</p><h2 id="1-12依赖排除"><a href="#1-12依赖排除" class="headerlink" title="1.12依赖排除"></a>1.12依赖排除</h2><p>单依赖过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;    <br>    &lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;<br>    &lt;artifactId&gt;hbase&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.94</span><span class="hljs-number">.17</span>&lt;/version&gt; <br>    &lt;exclusions&gt;  <br>         &lt;exclusion&gt;     <br>             &lt;groupId&gt;commons-logging&lt;/groupId&gt;        <br>             &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;  <br>         &lt;/exclusion&gt;  <br>    &lt;/exclusions&gt;  <br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>多依赖过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;<br>    &lt;artifactId&gt;hbase&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.94</span><span class="hljs-number">.17</span>&lt;/version&gt;<br>    &lt;exclusions&gt;<br>        &lt;exclusion&gt;<br>            &lt;groupId&gt;*&lt;/groupId&gt;<br>            &lt;artifactId&gt;*&lt;/artifactId&gt;<br>        &lt;/exclusion&gt;<br>    &lt;/exclusions&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="1-13-依赖原则"><a href="#1-13-依赖原则" class="headerlink" title="1.13.依赖原则"></a>1.13.依赖原则</h2><p>1、就近原则</p><p>2、先到先得</p><h2 id="1-14-统一管理依赖"><a href="#1-14-统一管理依赖" class="headerlink" title="1.14.统一管理依赖"></a>1.14.统一管理依赖</h2><p>在dependencies标签的上方，</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分页查询</title>
    <link href="/myblog/2021/06/24/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <url>/myblog/2021/06/24/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h1><p><strong>分析：</strong></p><p>1、总计录数（）：服务器可以自行查出，不需要浏览器提供数据</p><p>2、总页数（）：服务器无法自行查出。</p><p>​        需要客户端传递数据：每页显示的记录数（）</p><p>​            totalPage=totalCount %rows==0</p><p>​                等于：totalPage</p><p>​                不等于：totalPage+1</p><p>3、每页显示的数据（List list）</p><p>4、当前页码（int currentPage）：需要浏览器提供数据</p><p>5、分页查询语句limit参数</p><p>​        开始索引</p><p>​        查几条：rows前面已经传递过</p><p>​    1：（0，4）</p><p>​    2：（5，9）</p><p>​    3：（10，14）</p><p>公式：（currentPage）*rows</p><h1 id="组合条件查询"><a href="#组合条件查询" class="headerlink" title="组合条件查询"></a>组合条件查询</h1><p>1、sql的拼装</p><p>SELECT *FROM book WHERE b_name LIKE ‘西%’ AND b_author=’吴<code>book</code>%’ LIMIT 0,5;</p><p>2、返回的是</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
